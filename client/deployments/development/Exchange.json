{
  "address": "0xB0E5e4a72CDFd792D4a9395c0772378950B7Ec13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOneOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xebff9549cb509b8d292bf6500a1cd0f2bb8dbffefcaafad4ba87b1a2c57a230d",
  "receipt": {
    "to": null,
    "from": "0x468929A0DAC6D5A1c7BA1ab09c0862195D63b18c",
    "contractAddress": "0xB0E5e4a72CDFd792D4a9395c0772378950B7Ec13",
    "transactionIndex": 0,
    "gasUsed": "199219",
    "logsBloom": "0x
    "blockHash": "0x3b468c04c69896f03166b77a5a172161a8afe825169837b5c9db3fd16272978c",
    "transactionHash": "0xebff9549cb509b8d292bf6500a1cd0f2bb8dbffefcaafad4ba87b1a2c57a230d",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "199219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "757d4f95c78c6004921f814b71b616e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOneOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract Exchange {\\n    function executeOrder(\\n        address tokenOneAddress,\\n        address tokenTwoAddress,\\n        address tokenOneOwner,\\n        address tokenTwoOwner,\\n        uint256 tokenOneId,\\n        uint256 tokenTwoId,\\n        uint256 tokenOneAmount,\\n        uint256 tokenTwoAmount,\\n        bytes calldata data\\n    ) public {\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenOneAddress).safeTransferFrom(\\n            tokenOneOwner,\\n            tokenTwoOwner,\\n            tokenOneId,\\n            tokenOneAmount,\\n            data\\n        );\\n\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenTwoAddress).safeTransferFrom(\\n            tokenTwoOwner,\\n            tokenOneOwner,\\n            tokenTwoId,\\n            tokenTwoAmount,\\n            data\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeff447c4f5e5c74d6b9c3fd22d4fec54457296af7f353f2fa640d574690dbda1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506102a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dc3eb47e14610030575b600080fd5b61004361003e36600461013d565b610045565b005b604051637921219560e11b81526001600160a01b038b169063f242432a9061007b908b908b908b908a9089908990600401610215565b600060405180830381600087803b15801561009557600080fd5b505af11580156100a9573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a91506100e3908a908c908a90899089908990600401610215565b600060405180830381600087803b1580156100fd57600080fd5b505af1158015610111573d6000803e3d6000fd5b5050505050505050505050505050565b80356001600160a01b038116811461013857600080fd5b919050565b6000806000806000806000806000806101208b8d03121561015c578586fd5b6101658b610121565b995061017360208c01610121565b985061018160408c01610121565b975061018f60608c01610121565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff808211156101c8578384fd5b818d0191508d601f8301126101db578384fd5b8135818111156101e9578485fd5b8e60208285010111156101fa578485fd5b6020830194508093505050509295989b9194979a5092959850565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f191601019594505050505056fea26469706673582212207994cab3a3b53b93051a3102f05e1f2834192054ba102d334bf28dde53c2d12364736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dc3eb47e14610030575b600080fd5b61004361003e36600461013d565b610045565b005b604051637921219560e11b81526001600160a01b038b169063f242432a9061007b908b908b908b908a9089908990600401610215565b600060405180830381600087803b15801561009557600080fd5b505af11580156100a9573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a91506100e3908a908c908a90899089908990600401610215565b600060405180830381600087803b1580156100fd57600080fd5b505af1158015610111573d6000803e3d6000fd5b5050505050505050505050505050565b80356001600160a01b038116811461013857600080fd5b919050565b6000806000806000806000806000806101208b8d03121561015c578586fd5b6101658b610121565b995061017360208c01610121565b985061018160408c01610121565b975061018f60608c01610121565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff808211156101c8578384fd5b818d0191508d601f8301126101db578384fd5b8135818111156101e9578485fd5b8e60208285010111156101fa578485fd5b6020830194508093505050509295989b9194979a5092959850565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f191601019594505050505056fea26469706673582212207994cab3a3b53b93051a3102f05e1f2834192054ba102d334bf28dde53c2d12364736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}