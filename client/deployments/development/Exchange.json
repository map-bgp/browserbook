{
  "address": "0xe75411DC167f5369b93407A756e06ab1a65e2590",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOneOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPass",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "authorizationKey",
          "type": "string"
        }
      ],
      "name": "setPass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf8aa1fa76a5771cb349e5a4d347d246868f565b9490966503580d2964995a452",
  "receipt": {
    "to": null,
    "from": "0x5061D190265199186A5240B92E1337d357A15465",
    "contractAddress": "0xe75411DC167f5369b93407A756e06ab1a65e2590",
    "transactionIndex": 0,
    "gasUsed": "390117",
    "logsBloom": "0x
    "blockHash": "0x2a6ffb019b26ec93d5797c5c21981717d639f6138279ae2646e2f18952ed5bda",
    "transactionHash": "0xf8aa1fa76a5771cb349e5a4d347d246868f565b9490966503580d2964995a452",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "390117",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "20533ae920861d7f6d558a952a3bce55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOneOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPass\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"authorizationKey\",\"type\":\"string\"}],\"name\":\"setPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract Exchange {\\n\\n    struct Order {\\n      string id;\\n      string tokenFrom;\\n      string tokenTo;\\n      string orderType;\\n      string price;\\n      string quantity;\\n      address from;\\n      string created;\\n    }\\n\\n    bytes32 DOMAIN_SEPARATOR;\\n    \\n    mapping(address => string) private password;\\n\\n    bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    bytes32 constant ORDERS_TYPEHASH = keccak256(\\\"Order(string id,string tokenFrom,string tokenTo,string orderType,string price,string quantity,address from,string created)\\\");\\n\\n    constructor () {\\n        uint chainId = 1337;\\n        DOMAIN_SEPARATOR = keccak256(abi.encode(\\n            EIP712DOMAIN_TYPEHASH,\\n            keccak256(bytes(\\\"BrowserBook\\\")),\\n            keccak256(bytes(\\\"1\\\")),\\n            chainId,\\n           address(this)\\n        ));\\n    }\\n\\n    function setPass(string memory authorizationKey) public returns(bool){\\n        password[msg.sender] = authorizationKey;\\n        return true;\\n    }\\n\\n    function getPass() public view returns(string memory){\\n        return password[msg.sender];\\n    }\\n\\n    function verifySignature(Order memory order, uint8 v, bytes32 r, bytes32 s) internal view returns(bool){\\n       bytes32 OrderHash =  keccak256(abi.encode(\\n            ORDERS_TYPEHASH,\\n            keccak256(bytes(order.id)),\\n            keccak256(bytes(order.tokenFrom)),\\n            keccak256(bytes(order.tokenTo)),\\n            keccak256(bytes(order.orderType)),\\n            keccak256(bytes(order.price)),\\n            keccak256(bytes(order.quantity)),\\n            order.from,\\n            keccak256(bytes(order.created))\\n        ));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR,\\n            OrderHash\\n        ));\\n\\n        return ecrecover(digest, v, r, s) == order.from;\\n    }\\n\\n    function executeOrder(\\n        address tokenOneAddress,\\n        address tokenTwoAddress,\\n        address tokenOneOwner,\\n        address tokenTwoOwner,\\n        uint256 tokenOneId,\\n        uint256 tokenTwoId,\\n        uint256 tokenOneAmount,\\n        uint256 tokenTwoAmount,\\n        bytes calldata data\\n    ) public {\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenOneAddress).safeTransferFrom(\\n            tokenOneOwner,\\n            tokenTwoOwner,\\n            tokenOneId,\\n            tokenOneAmount,\\n            data\\n        );\\n\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenTwoAddress).safeTransferFrom(\\n            tokenTwoOwner,\\n            tokenOneOwner,\\n            tokenTwoId,\\n            tokenTwoAmount,\\n            data\\n        );\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x0d6da675c730b3b9533cc8f6dabbab815dafc72a7be87886c6bed24c098032f0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604080518082018252600b81526a42726f77736572426f6f6b60a81b6020918201528151808301835260018152603160f81b908201529051610539916100c1917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f917fe1087249b96a4db6e26768fcd2ff115b7c565029b03764f9b576a6ddb546c8ca917fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69186913091016100e2565b60408051601f1981840301815291905280516020909101206000555061010e565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6105a78061011d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063359c4a811461004657806344e9fd4b14610064578063dc3eb47e14610084575b600080fd5b61004e610099565b60405161005b91906104cd565b60405180910390f35b6100776100723660046103c8565b61013a565b60405161005b91906104c2565b6100976100923660046102f0565b610164565b005b3360009081526001602052604090208054606091906100b790610520565b80601f01602080910402602001604051908101604052809291908181526020018280546100e390610520565b80156101305780601f1061010557610100808354040283529160200191610130565b820191906000526020600020905b81548152906001019060200180831161011357829003601f168201915b5050505050905090565b3360009081526001602090815260408220835161015992850190610240565b50600190505b919050565b604051637921219560e11b81526001600160a01b038b169063f242432a9061019a908b908b908b908a9089908990600401610469565b600060405180830381600087803b1580156101b457600080fd5b505af11580156101c8573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a9150610202908a908c908a90899089908990600401610469565b600060405180830381600087803b15801561021c57600080fd5b505af1158015610230573d6000803e3d6000fd5b5050505050505050505050505050565b82805461024c90610520565b90600052602060002090601f01602090048101928261026e57600085556102b4565b82601f1061028757805160ff19168380011785556102b4565b828001600101855582156102b4579182015b828111156102b4578251825591602001919060010190610299565b506102c09291506102c4565b5090565b5b808211156102c057600081556001016102c5565b80356001600160a01b038116811461015f57600080fd5b6000806000806000806000806000806101208b8d03121561030f578586fd5b6103188b6102d9565b995061032660208c016102d9565b985061033460408c016102d9565b975061034260608c016102d9565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff8082111561037b578384fd5b818d0191508d601f83011261038e578384fd5b81358181111561039c578485fd5b8e60208285010111156103ad578485fd5b6020830194508093505050509295989b9194979a5092959850565b600060208083850312156103da578182fd5b823567ffffffffffffffff808211156103f1578384fd5b818501915085601f830112610404578384fd5b8135818111156104165761041661055b565b604051601f8201601f19168101850183811182821017156104395761043961055b565b604052818152838201850188101561044f578586fd5b818585018683013790810190930193909352509392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b901515815260200190565b6000602080835283518082850152825b818110156104f9578581018301518582016040015282016104dd565b8181111561050a5783604083870101525b50601f01601f1916929092016040019392505050565b60028104600182168061053457607f821691505b6020821081141561055557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122069f9f66a36892a394769fa342cd0198341a6e8c1f381317f22d81622d33556a164736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063359c4a811461004657806344e9fd4b14610064578063dc3eb47e14610084575b600080fd5b61004e610099565b60405161005b91906104cd565b60405180910390f35b6100776100723660046103c8565b61013a565b60405161005b91906104c2565b6100976100923660046102f0565b610164565b005b3360009081526001602052604090208054606091906100b790610520565b80601f01602080910402602001604051908101604052809291908181526020018280546100e390610520565b80156101305780601f1061010557610100808354040283529160200191610130565b820191906000526020600020905b81548152906001019060200180831161011357829003601f168201915b5050505050905090565b3360009081526001602090815260408220835161015992850190610240565b50600190505b919050565b604051637921219560e11b81526001600160a01b038b169063f242432a9061019a908b908b908b908a9089908990600401610469565b600060405180830381600087803b1580156101b457600080fd5b505af11580156101c8573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a9150610202908a908c908a90899089908990600401610469565b600060405180830381600087803b15801561021c57600080fd5b505af1158015610230573d6000803e3d6000fd5b5050505050505050505050505050565b82805461024c90610520565b90600052602060002090601f01602090048101928261026e57600085556102b4565b82601f1061028757805160ff19168380011785556102b4565b828001600101855582156102b4579182015b828111156102b4578251825591602001919060010190610299565b506102c09291506102c4565b5090565b5b808211156102c057600081556001016102c5565b80356001600160a01b038116811461015f57600080fd5b6000806000806000806000806000806101208b8d03121561030f578586fd5b6103188b6102d9565b995061032660208c016102d9565b985061033460408c016102d9565b975061034260608c016102d9565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff8082111561037b578384fd5b818d0191508d601f83011261038e578384fd5b81358181111561039c578485fd5b8e60208285010111156103ad578485fd5b6020830194508093505050509295989b9194979a5092959850565b600060208083850312156103da578182fd5b823567ffffffffffffffff808211156103f1578384fd5b818501915085601f830112610404578384fd5b8135818111156104165761041661055b565b604051601f8201601f19168101850183811182821017156104395761043961055b565b604052818152838201850188101561044f578586fd5b818585018683013790810190930193909352509392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b901515815260200190565b6000602080835283518082850152825b818110156104f9578581018301518582016040015282016104dd565b8181111561050a5783604083870101525b50601f01601f1916929092016040019392505050565b60028104600182168061053457607f821691505b6020821081141561055557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122069f9f66a36892a394769fa342cd0198341a6e8c1f381317f22d81622d33556a164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2650,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 2654,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "password",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}