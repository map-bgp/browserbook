{
  "address": "0x158DE9dCBD61Cb02C83FEE4D606288f12BFCbebB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "URI",
          "type": "string"
        }
      ],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d4954d00a4cfc353d3352d5b1e9bbc631ec9fbf19c9034e092fda34d2c7f373",
  "receipt": {
    "to": null,
    "from": "0x5061D190265199186A5240B92E1337d357A15465",
    "contractAddress": "0x158DE9dCBD61Cb02C83FEE4D606288f12BFCbebB",
    "transactionIndex": 0,
    "gasUsed": "2743048",
    "logsBloom": "0x
    "blockHash": "0x8829328a21d2bd59a3b5627fb1de2c79bdfc52b4f0f195b63100b2957d7a33b9",
    "transactionHash": "0x5d4954d00a4cfc353d3352d5b1e9bbc631ec9fbf19c9034e092fda34d2c7f373",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2743048",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c7c281d365612a41b86900c80d46f908",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"URI\",\"type\":\"string\"}],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xc743d2235b8854045c308d2f8f1ed88efed6c2bebf2b7a4a51ea42480c82e566\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/BBToken.sol\":{\"content\":\"/**\\n * @title BrowserBookToken\\n * @author Teja<saitejapottanigari@gmail.com>, Ankan <ankan0011@live.com>, Corey <corey.bothwell@uzh.ch>\\n * @dev for company specific ERC1155 token contract.\\n */\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./helpers/IterableMapping.sol\\\";\\n\\n\\ncontract BBToken is ERC1155 {\\n    using SafeMath for uint256;\\n    using IterableMapping for itmap;\\n    \\n    // address of owner of the token\\n    address private _owner;\\n\\n    // token nonce\\n    uint256 internal nonce;\\n\\n    // The top bit is a flag to tell if this is a NFT.\\n    uint256 internal constant TYPE_NF_BIT = 1 << 255;\\n\\n    // mapping of nft to owner\\n    mapping(uint256 => address) private _nfOwners;\\n\\n    // mapping for operator role\\n    mapping(uint256 => mapping(address => bool)) internal _operators;\\n\\n    mapping(uint256 => itmap) internal _holderAmount;\\n    mapping(uint256 => itmap) internal _claimableAmount;\\n\\n    mapping(uint256 => mapping(address => bool)) internal isHolder;\\n\\n    mapping(uint256 => bool) internal unlockedId;\\n\\n    mapping(uint256 => string) internal tokenMetadata;\\n\\n    mapping(uint256 => uint256) public _totalSupply;\\n\\n    // selectors for receiver callbacks\\n    bytes4 constant public ERC1155_RECEIVED       = 0xf23a6e61;\\n    bytes4 constant public ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    constructor(string memory URI, address owner) ERC1155(URI) {\\n        _owner = owner;\\n    }\\n\\n    /***********************************|\\n    |             EVENTS                |\\n    |__________________________________*/\\n\\n    event tokenCreation(address indexed, uint256);\\n    event nfTokenMint(address indexed, uint256 indexed);\\n    event ownerCredited(uint256 indexed, uint256);\\n\\n    /***********************************|\\n    |             MODIFIERS             |\\n    |__________________________________*/\\n\\n    modifier isAlreadyOwned(uint256 id) {\\n        if (_nfOwners[id] != address(0)) {\\n            revert(\\\"NFT is already owned by others\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier isUnlocked(uint256 id) {\\n        if (unlockedId[id] != true) {\\n            revert(\\\"Company did not create this token yet\\\");\\n        }\\n        _;\\n    }\\n\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4){\\n        return ERC1155_RECEIVED;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids, \\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4){\\n        return ERC1155_BATCH_RECEIVED;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == msg.sender, \\\"You cannot perform this action.\\\");\\n        _;\\n    }\\n\\n    modifier isOwnerOrOperator(uint256 id) {\\n        require(_owner == msg.sender || _operators[id][msg.sender] == true, \\\"You cannot perform this action.\\\");\\n        _;\\n    }\\n\\n    /***********************************|\\n    |             FUNCTIONS             |\\n    |__________________________________*/\\n\\n    /// @dev returns true if address is contract.\\n    function isContract(address _addr) private view returns (bool) {\\n        uint32 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return (size > 0);\\n    }\\n\\n    /// @dev Returns true if token is non-fungible\\n    function isNonFungible(uint256 id) public pure returns (bool) {\\n        return id & TYPE_NF_BIT == TYPE_NF_BIT;\\n    }\\n\\n    /// @dev Returns true if token is fungible\\n    function isFungible(uint256 id) public pure returns (bool) {\\n        return id & TYPE_NF_BIT == 0;\\n    }\\n\\n    function Owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function getNfOwner(uint256 id) public view returns (address) {\\n        return _nfOwners[id];\\n    }\\n\\n    function transferNfOwner(uint256 id, address to) private isOwnerOrOperator(id) {\\n        _nfOwners[id] = to;\\n    }\\n\\n    /// @dev creates a new token\\n    /// @param isNF is non-fungible token\\n    /// @return id_ of token (a unique identifier)\\n    function createToken(bool isNF) external onlyOwner returns (uint256 id_) {\\n        id_ = ++nonce;\\n\\n        if (isNF) {\\n            id_ = id_ | TYPE_NF_BIT;\\n        }\\n\\n        // emit a Transfer event with Create semantic to help with discovery.\\n        emit tokenCreation(msg.sender, id_);\\n    }\\n\\n    function nonFungibleMint(address account, uint256 id, string memory tokenURI) public isAlreadyOwned(id) isOwnerOrOperator(id) {\\n        require(isNonFungible(id), \\\"TRIED_TO_MINT_FUNGIBLE_FOR_NON_FUNGIBLE_TOKEN\\\");\\n\\n        transferNfOwner(id, account);\\n        _totalSupply[id] = 1;\\n\\n        tokenMetadata[id] = tokenURI;\\n        emit nfTokenMint(account, id);\\n    }\\n\\n    function fungibleMint(address account, uint256 id, uint256 amount, bytes memory data) public isOwnerOrOperator(id) returns(bool){\\n        require(isFungible(id), \\\"TRIED_TO_MINT_NON_FUNGIBLE_FOR_FUNGIBLE_TOKEN\\\");\\n        super._mint(account, id, amount, data);\\n\\n        if (isHolder[id][account]) {\\n            _totalSupply[id] += amount;\\n            return _holderAmount[id].increase(account,amount);\\n        } else {\\n          _totalSupply[id] += amount;\\n          isHolder[id][account]  = true;\\n          return _holderAmount[id].insert(account,amount);\\n        }\\n    }\\n\\n    function fungibleBurn(address account, uint256 id, uint256 amount) public isOwnerOrOperator(id) returns(bool){\\n        require(isFungible(id), \\\"TRIED_TO_BURN_FUNGIBLE_FOR_NON_FUNGIBLE_TOKEN\\\");\\n        super._burn(account, id, amount);\\n\\n        _totalSupply[id] -= amount;\\n        return _holderAmount[id].reduce(account,amount);\\n    }\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes memory data) public virtual override(ERC1155) {\\n        require(from == _msgSender() || isApprovedForAll(from, _msgSender()), \\\"ERC1155: CALLER_IS_NOT_OWNER_OR_APPROVED\\\");\\n\\n        if (isFungible(id)) {\\n            super._safeTransferFrom(from, to, id, amount, data);\\n            _holderAmount[id].reduce(from,amount);\\n            _holderAmount[id].increase(to,amount);\\n            return;\\n        } else {\\n            require(getNfOwner(id) == from, \\\"Wrong NFT owner\\\");\\n            transferNfOwner(id, to);\\n        }\\n    }\\n\\n    function provideDividend(uint256 id) public payable onlyOwner {\\n        require(isFungible(id), \\\"TRIED_TO_PROVIDE_DIVIDEND_FOR_NON_FUNGIBLE_TOKEN\\\");\\n\\n        uint256 dividend = msg.value;\\n\\n        address account;\\n        uint256 value;\\n        uint256 dividendShare;\\n\\n        for (uint256 i=1; _holderAmount[id].valid(i); i+=1) {\\n            (account, value) = _holderAmount[id].get(i);\\n            dividendShare = value.div(_totalSupply[id]).mul(dividend);\\n            _claimableAmount[id].insert(account,dividendShare * 100);\\n        }\\n\\n        emit ownerCredited(id, dividend);\\n    }\\n\\n    function dividendClaim(address account, uint256 id) public payable {\\n        require(isFungible(id), \\\"TRIED_TO_CLAIM_DIVIDEND_FOR_NON_FUNGIBLE_TOKEN\\\");\\n\\n        uint256 keyIndex = _claimableAmount[id].getKeyIndex(account);\\n        (, uint256 value)= _claimableAmount[id].get(keyIndex);\\n\\n        _claimableAmount[id].reduce(account, value);\\n        payable(account).transfer(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe7fc2740db237580178ead611f61fa9713a3c47632467155e26dbc535a9fbf2b\"},\"contracts/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title Exchange\\n * @author Teja<saitejapottanigari@gmail.com>, Ankan <ankan0011@live.com>, Corey <corey.bothwell@gmail.com>\\n * @dev Enables the order verification and order matching functionalities.\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BBToken.sol\\\";\\n\\ncontract TokenFactory {\\n    // To have mapping between company URI and company's tokenFactory address\\n    mapping(string => address) private _tokenAddress;\\n    // To have mapping between company owner and company's tokenFactory address\\n\\n    event TokenCreated(address indexed, address indexed, string);\\n\\n    function create(string calldata URI) public returns (address) {\\n        // creates a new token\\n        BBToken token = new BBToken(URI, msg.sender);\\n\\n        _tokenAddress[URI] = address(token);\\n\\n        address owner = token.Owner();\\n\\n        emit TokenCreated(owner, address(token), URI);\\n\\n        return address(token);\\n    }\\n\\n    function getTokenAddress(string calldata URI) public view returns (address) {\\n        return _tokenAddress[URI];\\n    }\\n}\\n\",\"keccak256\":\"0xca8a93932119699b38e041ad1883d2216a3779eb4ba7121a9159e61bc99cfc2a\",\"license\":\"MIT\"},\"contracts/helpers/IterableMapping.sol\":{\"content\":\"pragma solidity >=0.6.8 <0.9.0;\\n\\nstruct IndexValue { uint keyIndex; uint value; }\\nstruct KeyFlag { address key; bool exists; }\\n\\nstruct itmap {\\n    mapping(address => IndexValue) data;\\n    KeyFlag[] keys;\\n    uint size;\\n}\\n\\nlibrary IterableMapping {\\n    function insert(itmap storage self, address key, uint value) internal returns (bool inserted) {\\n        uint keyIndex = self.data[key].keyIndex;\\n        if (keyIndex > 0 || self.keys[keyIndex].exists == true)\\n            return false;\\n        else {\\n            keyIndex = self.keys.length + 1;\\n            self.keys.push();\\n            self.data[key].keyIndex = keyIndex;\\n            self.data[key].value = value;\\n            self.keys[keyIndex].key = key;\\n            self.keys[keyIndex].exists = true;\\n            self.size++;\\n            return true;\\n        }\\n    }\\n\\n    function increase(itmap storage self, address key, uint256 nextValue) internal returns (bool updated) {\\n        uint keyIndex = self.data[key].keyIndex;\\n        uint previousValue = self.data[key].keyIndex;\\n        if (keyIndex > 0 && self.keys[keyIndex].exists == true){\\n            self.data[key].value = previousValue + nextValue;\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    function reduce(itmap storage self, address key, uint256 nextValue) internal returns (bool updated) {\\n        uint keyIndex = self.data[key].keyIndex;\\n        uint previousValue = self.data[key].keyIndex;\\n        if (keyIndex > 0 && self.keys[keyIndex].exists == true){\\n            self.data[key].value = previousValue - nextValue;\\n            return true;\\n        }\\n        else{\\n            return false;\\n        }\\n    }\\n\\n    function remove(itmap storage self, address key) internal returns (bool success) {\\n        uint keyIndex = self.data[key].keyIndex;\\n        if (keyIndex == 0)\\n            return false;\\n        delete self.data[key];\\n        self.keys[keyIndex].exists = false;\\n        self.size --;\\n    }\\n\\n    function contains(itmap storage self, address key) internal view returns (bool) {\\n        return self.data[key].keyIndex > 0;\\n    }\\n\\n    function valid(itmap storage self, uint keyIndex) internal view returns (bool) {\\n        return keyIndex < self.keys.length;\\n    }\\n\\n    function get(itmap storage self, uint keyIndex) internal view returns (address key, uint value) {\\n        key = self.keys[keyIndex].key;\\n        value = self.data[key].value;\\n    }\\n\\n    function getKeyIndex(itmap storage self, address key) internal view returns (uint) {\\n        return self.data[key].keyIndex;\\n    }\\n}\",\"keccak256\":\"0x71e99795f691700bdd03ebd1e1cbe50734677f934bc2fbf86bf176b77fadfc77\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063b6a46b3b1461003b578063c409123614610064575b600080fd5b61004e610049366004610223565b610077565b60405161005b91906102ca565b60405180910390f35b61004e610072366004610223565b6101b4565b600080838333604051610089906101e8565b610095939291906102fa565b604051809103906000f0801580156100b1573d6000803e3d6000fd5b50905080600085856040516100c79291906102ba565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03958616179055635a54cd2760e11b8152905160009385169263b4a99a4e9260048082019391829003018186803b15801561012557600080fd5b505afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d91906101f5565b9050816001600160a01b0316816001600160a01b03167fb51c8cbe199ffe8b0d1d39b62d473569750653cb18b165f77ae423b3900180ad87876040516101a49291906102de565b60405180910390a3509392505050565b60008083836040516101c79291906102ba565b908152604051908190036020019020546001600160a01b0316905092915050565b612d4d8061032783390190565b600060208284031215610206578081fd5b81516001600160a01b038116811461021c578182fd5b9392505050565b60008060208385031215610235578081fd5b823567ffffffffffffffff8082111561024c578283fd5b818501915085601f83011261025f578283fd5b81358181111561026d578384fd5b86602082850101111561027e578384fd5b60209290920196919550909350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6000602082526102f2602083018486610290565b949350505050565b60006040825261030e604083018587610290565b905060018060a01b038316602083015294935050505056fe60806040523480156200001157600080fd5b5060405162002d4d38038062002d4d833981016040819052620000349162000144565b81620000408162000068565b50600380546001600160a01b0319166001600160a01b0392909216919091179055506200027b565b80516200007d90600290602084019062000081565b5050565b8280546200008f9062000228565b90600052602060002090601f016020900481019282620000b35760008555620000fe565b82601f10620000ce57805160ff1916838001178555620000fe565b82800160010185558215620000fe579182015b82811115620000fe578251825591602001919060010190620000e1565b506200010c92915062000110565b5090565b5b808211156200010c576000815560010162000111565b80516001600160a01b03811681146200013f57600080fd5b919050565b6000806040838503121562000157578182fd5b82516001600160401b03808211156200016e578384fd5b818501915085601f83011262000182578384fd5b81518181111562000197576200019762000265565b6040516020601f8301601f1916820181018481118382101715620001bf57620001bf62000265565b6040528282528483018101891015620001d6578687fd5b8693505b82841015620001f95784840181015182850182015292830192620001da565b828411156200020a57868184840101525b8196506200021a81890162000127565b955050505050509250929050565b6002810460018216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612ac2806200028b6000396000f3fe60806040526004361061013f5760003560e01c8063a22cb465116100b6578063e44591f01161006f578063e44591f01461039a578063e985e9c5146103ba578063f23a6e61146103da578063f242432a146103fa578063f5b5bfb91461041a578063fc67bf1c1461042d5761013f565b8063a22cb465146102e3578063adebf6f214610303578063b4a99a4e14610323578063bc197c8114610338578063d533da2a14610365578063e0a5c949146103855761013f565b80633fa9f7f3116101085780633fa9f7f3146102165780634e1273f4146102435780634fe7baf6146102705780635977e82a14610283578063717b7f36146102a357806398b4ad6f146102c35761013f565b8062fdd58e1461014457806301ffc9a71461017a5780630e89341c146101a75780632eb2c2d6146101d45780633a3aea10146101f6575b600080fd5b34801561015057600080fd5b5061016461015f366004611eba565b610442565b6040516101719190612876565b60405180910390f35b34801561018657600080fd5b5061019a6101953660046120b1565b610499565b6040516101719190612275565b3480156101b357600080fd5b506101c76101c23660046120e9565b6104e1565b6040516101719190612295565b3480156101e057600080fd5b506101f46101ef366004611d15565b610575565b005b34801561020257600080fd5b50610164610211366004612097565b6105d3565b34801561022257600080fd5b506102366102313660046120e9565b610669565b6040516101719190612186565b34801561024f57600080fd5b5061026361025e366004611fda565b610684565b604051610171919061223d565b6101f461027e366004611eba565b6107a3565b34801561028f57600080fd5b5061016461029e3660046120e9565b610850565b3480156102af57600080fd5b5061019a6102be366004611f4a565b610862565b3480156102cf57600080fd5b506101f46102de366004611ee3565b61092f565b3480156102ef57600080fd5b506101f46102fe366004611e91565b610a52565b34801561030f57600080fd5b5061019a61031e3660046120e9565b610a68565b34801561032f57600080fd5b50610236610a72565b34801561034457600080fd5b50610358610353366004611c5f565b610a82565b6040516101719190612280565b34801561037157600080fd5b5061019a610380366004611f7c565b610a96565b34801561039157600080fd5b50610358610bfb565b3480156103a657600080fd5b5061019a6103b53660046120e9565b610c06565b3480156103c657600080fd5b5061019a6103d5366004611c2d565b610c12565b3480156103e657600080fd5b506103586103f5366004611dba565b610c40565b34801561040657600080fd5b506101f4610415366004611e2f565b610c52565b6101f46104283660046120e9565b610d33565b34801561043957600080fd5b50610358610e63565b60006001600160a01b0383166104735760405162461bcd60e51b815260040161046a9061237b565b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104ca57506001600160e01b031982166303a24d0760e21b145b806104d957506104d982610e6e565b90505b919050565b6060600280546104f090612947565b80601f016020809104026020016040519081016040528092919081815260200182805461051c90612947565b80156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b50505050509050919050565b61057d610e87565b6001600160a01b0316856001600160a01b031614806105a357506105a3856103d5610e87565b6105bf5760405162461bcd60e51b815260040161046a906124ea565b6105cc8585858585610e8b565b5050505050565b6003546000906001600160a01b031633146106005760405162461bcd60e51b815260040161046a90612344565b60046000815461060f90612982565b91829055509050811561062357600160ff1b175b336001600160a01b03167f3b268e028f2b1bf58c83796923f89d1e1d1fcd7d3e76ae07ac57c0ddce79e5018260405161065c9190612876565b60405180910390a2919050565b6000908152600560205260409020546001600160a01b031690565b606081518351146106a75760405162461bcd60e51b815260040161046a906127a4565b600083516001600160401b038111156106d057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106f9578160200160208202803683370190505b50905060005b845181101561079b5761076085828151811061072b57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061075357634e487b7160e01b600052603260045260246000fd5b6020026020010151610442565b82828151811061078057634e487b7160e01b600052603260045260246000fd5b602090810291909101015261079481612982565b90506106ff565b509392505050565b6107ac81610a68565b6107c85760405162461bcd60e51b815260040161046a906123c6565b60008181526008602052604081206107e0908461105c565b6000838152600860205260408120919250906107fc9083611078565b6000858152600860205260409020909250610819915085836110cb565b506040516001600160a01b0385169082156108fc029083906000818181858888f193505050501580156105cc573d6000803e3d6000fd5b600c6020526000908152604090205481565b60035460009083906001600160a01b031633148061089e5750600081815260066020908152604080832033845290915290205460ff1615156001145b6108ba5760405162461bcd60e51b815260040161046a90612344565b6108c384610a68565b6108df5760405162461bcd60e51b815260040161046a90612458565b6108ea858585611176565b6000848152600c602052604081208054859290610908908490612930565b909155505060008481526007602052604090206109269086856110cb565b95945050505050565b60008281526005602052604090205482906001600160a01b0316156109665760405162461bcd60e51b815260040161046a90612687565b60035483906001600160a01b031633148061099f5750600081815260066020908152604080832033845290915290205460ff1615156001145b6109bb5760405162461bcd60e51b815260040161046a90612344565b6109c484610c06565b6109e05760405162461bcd60e51b815260040161046a906126be565b6109ea8486611285565b6000848152600c6020908152604080832060019055600b82529091208451610a1492860190611a04565b5060405184906001600160a01b038716907f1c99a3094efa6e992469bc3c39571effd2c0bb7c5c0e6b4dfbe767b3d2da142c90600090a35050505050565b610a64610a5d610e87565b8383611309565b5050565b600160ff1b161590565b6003546001600160a01b03165b90565b63bc197c8160e01b98975050505050505050565b60035460009084906001600160a01b0316331480610ad25750600081815260066020908152604080832033845290915290205460ff1615156001145b610aee5760405162461bcd60e51b815260040161046a90612344565b610af785610a68565b610b135760405162461bcd60e51b815260040161046a90612584565b610b1f868686866113ac565b60008581526009602090815260408083206001600160a01b038a16845290915290205460ff1615610b8d576000858152600c602052604081208054869290610b689084906128d9565b90915550506000858152600760205260409020610b8690878661149b565b9150610bf2565b6000858152600c602052604081208054869290610bab9084906128d9565b909155505060008581526009602090815260408083206001600160a01b038a1684528252808320805460ff1916600117905587835260079091529020610b8690878661150d565b50949350505050565b63f23a6e6160e01b81565b600160ff1b9081161490565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b63f23a6e6160e01b9695505050505050565b610c5a610e87565b6001600160a01b0316856001600160a01b03161480610c805750610c80856103d5610e87565b610c9c5760405162461bcd60e51b815260040161046a9061253c565b610ca583610a68565b15610cf057610cb7858585858561166f565b6000838152600760205260409020610cd09086846110cb565b506000838152600760205260409020610cea90858461149b565b506105cc565b846001600160a01b0316610d0384610669565b6001600160a01b031614610d295760405162461bcd60e51b815260040161046a9061265e565b6105cc8385611285565b6003546001600160a01b03163314610d5d5760405162461bcd60e51b815260040161046a90612344565b610d6681610a68565b610d825760405162461bcd60e51b815260040161046a9061270b565b346000808060015b6000868152600760205260409020610da290826117a3565b15610e23576000868152600760205260409020610dbf9082611078565b6000888152600c60205260409020549195509350610dea908690610de49086906117ae565b906117ba565b9150610e1084610dfb846064612911565b6000898152600860205260409020919061150d565b50610e1c6001826128d9565b9050610d8a565b50847f37dc85b4c5675703b4cd256ce394429805a35dfb7927cb9752de79f9e8c6aa6685604051610e549190612876565b60405180910390a25050505050565b63bc197c8160e01b81565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b8151835114610eac5760405162461bcd60e51b815260040161046a906127ed565b6001600160a01b038416610ed25760405162461bcd60e51b815260040161046a906124a5565b6000610edc610e87565b9050610eec818787878787611054565b60005b8451811015610fee576000858281518110610f1a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610f4657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610f965760405162461bcd60e51b815260040161046a90612614565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610fd39084906128d9565b9250508190555050505080610fe790612982565b9050610eef565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161103e929190612250565b60405180910390a46110548187878787876117c6565b505050505050565b6001600160a01b03166000908152602091909152604090205490565b60008083600101838154811061109e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083529590526040902060010154939492505050565b6001600160a01b03821660009081526020849052604081205480801580159061112e575085600101828154811061111257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b156111685761113d8482612930565b6001600160a01b0386166000908152602088905260409020600190810191909155925061116f915050565b6000925050505b9392505050565b6001600160a01b03831661119c5760405162461bcd60e51b815260040161046a906125d1565b60006111a6610e87565b90506111d6818560006111b8876118d4565b6111c1876118d4565b60405180602001604052806000815250611054565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156112175760405162461bcd60e51b815260040161046a90612414565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611276908990899061287f565b60405180910390a45050505050565b60035482906001600160a01b03163314806112be5750600081815260066020908152604080832033845290915290205460ff1615156001145b6112da5760405162461bcd60e51b815260040161046a90612344565b5060009182526005602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b816001600160a01b0316836001600160a01b0316141561133b5760405162461bcd60e51b815260040161046a9061275b565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061139f908590612275565b60405180910390a3505050565b6001600160a01b0384166113d25760405162461bcd60e51b815260040161046a90612835565b60006113dc610e87565b90506113fd816000876113ee886118d4565b6113f7886118d4565b87611054565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061142d9084906128d9565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161148492919061287f565b60405180910390a46105cc8160008787878761192d565b6001600160a01b0382166000908152602084905260408120548080158015906114fe57508560010182815481106114e257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b156111685761113d84826128d9565b6001600160a01b0382166000908152602084905260408120548015158061156e575084600101818154811061155257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b1561157d57600091505061116f565b60018086015461158c916128d9565b60018087018054820181556001600160a01b038716600090815260208990526040902083815590910185905580549192508591839081106115dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600185810180548390811061162b57634e487b7160e01b600052603260045260246000fd5b600091825260208220018054921515600160a01b0260ff60a01b19909316929092179091556002860180549161166083612982565b9190505550600191505061116f565b6001600160a01b0384166116955760405162461bcd60e51b815260040161046a906124a5565b600061169f610e87565b90506116b08187876113ee886118d4565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156116f15760405162461bcd60e51b815260040161046a90612614565b6000858152602081815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061172e9084906128d9565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161178492919061287f565b60405180910390a461179a82888888888861192d565b50505050505050565b600191909101541190565b600061116f82846128f1565b600061116f8284612911565b6117d8846001600160a01b03166119fe565b156110545760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611811908990899088908890889060040161219a565b602060405180830381600087803b15801561182b57600080fd5b505af192505050801561185b575060408051601f3d908101601f19168201909252611858918101906120cd565b60015b6118a4576118676129cf565b80611872575061188c565b8060405162461bcd60e51b815260040161046a9190612295565b60405162461bcd60e51b815260040161046a906122a8565b6001600160e01b0319811663bc197c8160e01b1461179a5760405162461bcd60e51b815260040161046a906122fc565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061191c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61193f846001600160a01b03166119fe565b156110545760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061197890899089908890889088906004016121f8565b602060405180830381600087803b15801561199257600080fd5b505af19250505080156119c2575060408051601f3d908101601f191682019092526119bf918101906120cd565b60015b6119ce576118676129cf565b6001600160e01b0319811663f23a6e6160e01b1461179a5760405162461bcd60e51b815260040161046a906122fc565b3b151590565b828054611a1090612947565b90600052602060002090601f016020900481019282611a325760008555611a78565b82601f10611a4b57805160ff1916838001178555611a78565b82800160010185558215611a78579182015b82811115611a78578251825591602001919060010190611a5d565b50611a84929150611a88565b5090565b5b80821115611a845760008155600101611a89565b60006001600160401b03831115611ab657611ab66129b3565b611ac9601f8401601f191660200161288d565b9050828152838383011115611add57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146104dc57600080fd5b60008083601f840112611b1c578182fd5b5081356001600160401b03811115611b32578182fd5b6020830191508360208083028501011115611b4c57600080fd5b9250929050565b600082601f830112611b63578081fd5b81356020611b78611b73836128b6565b61288d565b8281528181019085830183850287018401881015611b94578586fd5b855b85811015611bb257813584529284019290840190600101611b96565b5090979650505050505050565b803580151581146104dc57600080fd5b60008083601f840112611be0578182fd5b5081356001600160401b03811115611bf6578182fd5b602083019150836020828501011115611b4c57600080fd5b600082601f830112611c1e578081fd5b61116f83833560208501611a9d565b60008060408385031215611c3f578182fd5b611c4883611af4565b9150611c5660208401611af4565b90509250929050565b60008060008060008060008060a0898b031215611c7a578384fd5b611c8389611af4565b9750611c9160208a01611af4565b965060408901356001600160401b0380821115611cac578586fd5b611cb88c838d01611b0b565b909850965060608b0135915080821115611cd0578586fd5b611cdc8c838d01611b0b565b909650945060808b0135915080821115611cf4578384fd5b50611d018b828c01611bcf565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d2c578081fd5b611d3586611af4565b9450611d4360208701611af4565b935060408601356001600160401b0380821115611d5e578283fd5b611d6a89838a01611b53565b94506060880135915080821115611d7f578283fd5b611d8b89838a01611b53565b93506080880135915080821115611da0578283fd5b50611dad88828901611c0e565b9150509295509295909350565b60008060008060008060a08789031215611dd2578182fd5b611ddb87611af4565b9550611de960208801611af4565b9450604087013593506060870135925060808701356001600160401b03811115611e11578283fd5b611e1d89828a01611bcf565b979a9699509497509295939492505050565b600080600080600060a08688031215611e46578081fd5b611e4f86611af4565b9450611e5d60208701611af4565b9350604086013592506060860135915060808601356001600160401b03811115611e85578182fd5b611dad88828901611c0e565b60008060408385031215611ea3578182fd5b611eac83611af4565b9150611c5660208401611bbf565b60008060408385031215611ecc578182fd5b611ed583611af4565b946020939093013593505050565b600080600060608486031215611ef7578081fd5b611f0084611af4565b92506020840135915060408401356001600160401b03811115611f21578182fd5b8401601f81018613611f31578182fd5b611f4086823560208401611a9d565b9150509250925092565b600080600060608486031215611f5e578081fd5b611f6784611af4565b95602085013595506040909401359392505050565b60008060008060808587031215611f91578182fd5b611f9a85611af4565b9350602085013592506040850135915060608501356001600160401b03811115611fc2578182fd5b611fce87828801611c0e565b91505092959194509250565b60008060408385031215611fec578182fd5b82356001600160401b0380821115612002578384fd5b818501915085601f830112612015578384fd5b81356020612025611b73836128b6565b82815281810190858301838502870184018b1015612041578889fd5b8896505b8487101561206a5761205681611af4565b835260019690960195918301918301612045565b5096505086013592505080821115612080578283fd5b5061208d85828601611b53565b9150509250929050565b6000602082840312156120a8578081fd5b61116f82611bbf565b6000602082840312156120c2578081fd5b813561116f81612a73565b6000602082840312156120de578081fd5b815161116f81612a73565b6000602082840312156120fa578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561213057815187529582019590820190600101612114565b509495945050505050565b60008151808452815b8181101561216057602081850181015186830182015201612144565b818111156121715782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a0604082018190526000906121c690830186612101565b82810360608401526121d88186612101565b905082810360808401526121ec818561213b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906122329083018461213b565b979650505050505050565b60006020825261116f6020830184612101565b6000604082526122636040830185612101565b82810360208401526109268185612101565b901515815260200190565b6001600160e01b031991909116815260200190565b60006020825261116f602083018461213b565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252601f908201527f596f752063616e6e6f7420706572666f726d207468697320616374696f6e2e00604082015260600190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252602e908201527f54524945445f544f5f434c41494d5f4449564944454e445f464f525f4e4f4e5f60408201526d232aa723a4a12622afaa27a5a2a760911b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602d908201527f54524945445f544f5f4255524e5f46554e4749424c455f464f525f4e4f4e5f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60208082526028908201527f455243313135353a2043414c4c45525f49535f4e4f545f4f574e45525f4f525f6040820152671054141493d5915160c21b606082015260800190565b6020808252602d908201527f54524945445f544f5f4d494e545f4e4f4e5f46554e4749424c455f464f525f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600f908201526e2bb937b7339027232a1037bbb732b960891b604082015260600190565b6020808252601e908201527f4e465420697320616c7265616479206f776e6564206279206f74686572730000604082015260600190565b6020808252602d908201527f54524945445f544f5f4d494e545f46554e4749424c455f464f525f4e4f4e5f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526030908201527f54524945445f544f5f50524f564944455f4449564944454e445f464f525f4e4f60408201526f272fa32aa723a4a12622afaa27a5a2a760811b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b03811182821017156128ae576128ae6129b3565b604052919050565b60006001600160401b038211156128cf576128cf6129b3565b5060209081020190565b600082198211156128ec576128ec61299d565b500190565b60008261290c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561292b5761292b61299d565b500290565b6000828210156129425761294261299d565b500390565b60028104600182168061295b57607f821691505b6020821081141561297c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129965761299661299d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156129df57610a7f565b600481823e6308c379a06129f382516129c9565b146129fd57610a7f565b6040513d600319016004823e80513d6001600160401b038160248401118184111715612a2c5750505050610a7f565b82840192508251915080821115612a465750505050610a7f565b503d83016020828401011115612a5e57505050610a7f565b601f01601f1916810160200160405291505090565b6001600160e01b031981168114612a8957600080fd5b5056fea26469706673582212201498260b605b97dd7b8ac8cc3f38eba1067e700bdf651581830ed2af22ff764e64736f6c63430008000033a264697066735822122035c452ec91ed80ec633f28e48c666c6fdcb9e4463072c14b103484754110c1e964736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063b6a46b3b1461003b578063c409123614610064575b600080fd5b61004e610049366004610223565b610077565b60405161005b91906102ca565b60405180910390f35b61004e610072366004610223565b6101b4565b600080838333604051610089906101e8565b610095939291906102fa565b604051809103906000f0801580156100b1573d6000803e3d6000fd5b50905080600085856040516100c79291906102ba565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03958616179055635a54cd2760e11b8152905160009385169263b4a99a4e9260048082019391829003018186803b15801561012557600080fd5b505afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d91906101f5565b9050816001600160a01b0316816001600160a01b03167fb51c8cbe199ffe8b0d1d39b62d473569750653cb18b165f77ae423b3900180ad87876040516101a49291906102de565b60405180910390a3509392505050565b60008083836040516101c79291906102ba565b908152604051908190036020019020546001600160a01b0316905092915050565b612d4d8061032783390190565b600060208284031215610206578081fd5b81516001600160a01b038116811461021c578182fd5b9392505050565b60008060208385031215610235578081fd5b823567ffffffffffffffff8082111561024c578283fd5b818501915085601f83011261025f578283fd5b81358181111561026d578384fd5b86602082850101111561027e578384fd5b60209290920196919550909350505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b6000828483379101908152919050565b6001600160a01b0391909116815260200190565b6000602082526102f2602083018486610290565b949350505050565b60006040825261030e604083018587610290565b905060018060a01b038316602083015294935050505056fe60806040523480156200001157600080fd5b5060405162002d4d38038062002d4d833981016040819052620000349162000144565b81620000408162000068565b50600380546001600160a01b0319166001600160a01b0392909216919091179055506200027b565b80516200007d90600290602084019062000081565b5050565b8280546200008f9062000228565b90600052602060002090601f016020900481019282620000b35760008555620000fe565b82601f10620000ce57805160ff1916838001178555620000fe565b82800160010185558215620000fe579182015b82811115620000fe578251825591602001919060010190620000e1565b506200010c92915062000110565b5090565b5b808211156200010c576000815560010162000111565b80516001600160a01b03811681146200013f57600080fd5b919050565b6000806040838503121562000157578182fd5b82516001600160401b03808211156200016e578384fd5b818501915085601f83011262000182578384fd5b81518181111562000197576200019762000265565b6040516020601f8301601f1916820181018481118382101715620001bf57620001bf62000265565b6040528282528483018101891015620001d6578687fd5b8693505b82841015620001f95784840181015182850182015292830192620001da565b828411156200020a57868184840101525b8196506200021a81890162000127565b955050505050509250929050565b6002810460018216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612ac2806200028b6000396000f3fe60806040526004361061013f5760003560e01c8063a22cb465116100b6578063e44591f01161006f578063e44591f01461039a578063e985e9c5146103ba578063f23a6e61146103da578063f242432a146103fa578063f5b5bfb91461041a578063fc67bf1c1461042d5761013f565b8063a22cb465146102e3578063adebf6f214610303578063b4a99a4e14610323578063bc197c8114610338578063d533da2a14610365578063e0a5c949146103855761013f565b80633fa9f7f3116101085780633fa9f7f3146102165780634e1273f4146102435780634fe7baf6146102705780635977e82a14610283578063717b7f36146102a357806398b4ad6f146102c35761013f565b8062fdd58e1461014457806301ffc9a71461017a5780630e89341c146101a75780632eb2c2d6146101d45780633a3aea10146101f6575b600080fd5b34801561015057600080fd5b5061016461015f366004611eba565b610442565b6040516101719190612876565b60405180910390f35b34801561018657600080fd5b5061019a6101953660046120b1565b610499565b6040516101719190612275565b3480156101b357600080fd5b506101c76101c23660046120e9565b6104e1565b6040516101719190612295565b3480156101e057600080fd5b506101f46101ef366004611d15565b610575565b005b34801561020257600080fd5b50610164610211366004612097565b6105d3565b34801561022257600080fd5b506102366102313660046120e9565b610669565b6040516101719190612186565b34801561024f57600080fd5b5061026361025e366004611fda565b610684565b604051610171919061223d565b6101f461027e366004611eba565b6107a3565b34801561028f57600080fd5b5061016461029e3660046120e9565b610850565b3480156102af57600080fd5b5061019a6102be366004611f4a565b610862565b3480156102cf57600080fd5b506101f46102de366004611ee3565b61092f565b3480156102ef57600080fd5b506101f46102fe366004611e91565b610a52565b34801561030f57600080fd5b5061019a61031e3660046120e9565b610a68565b34801561032f57600080fd5b50610236610a72565b34801561034457600080fd5b50610358610353366004611c5f565b610a82565b6040516101719190612280565b34801561037157600080fd5b5061019a610380366004611f7c565b610a96565b34801561039157600080fd5b50610358610bfb565b3480156103a657600080fd5b5061019a6103b53660046120e9565b610c06565b3480156103c657600080fd5b5061019a6103d5366004611c2d565b610c12565b3480156103e657600080fd5b506103586103f5366004611dba565b610c40565b34801561040657600080fd5b506101f4610415366004611e2f565b610c52565b6101f46104283660046120e9565b610d33565b34801561043957600080fd5b50610358610e63565b60006001600160a01b0383166104735760405162461bcd60e51b815260040161046a9061237b565b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104ca57506001600160e01b031982166303a24d0760e21b145b806104d957506104d982610e6e565b90505b919050565b6060600280546104f090612947565b80601f016020809104026020016040519081016040528092919081815260200182805461051c90612947565b80156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b50505050509050919050565b61057d610e87565b6001600160a01b0316856001600160a01b031614806105a357506105a3856103d5610e87565b6105bf5760405162461bcd60e51b815260040161046a906124ea565b6105cc8585858585610e8b565b5050505050565b6003546000906001600160a01b031633146106005760405162461bcd60e51b815260040161046a90612344565b60046000815461060f90612982565b91829055509050811561062357600160ff1b175b336001600160a01b03167f3b268e028f2b1bf58c83796923f89d1e1d1fcd7d3e76ae07ac57c0ddce79e5018260405161065c9190612876565b60405180910390a2919050565b6000908152600560205260409020546001600160a01b031690565b606081518351146106a75760405162461bcd60e51b815260040161046a906127a4565b600083516001600160401b038111156106d057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156106f9578160200160208202803683370190505b50905060005b845181101561079b5761076085828151811061072b57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061075357634e487b7160e01b600052603260045260246000fd5b6020026020010151610442565b82828151811061078057634e487b7160e01b600052603260045260246000fd5b602090810291909101015261079481612982565b90506106ff565b509392505050565b6107ac81610a68565b6107c85760405162461bcd60e51b815260040161046a906123c6565b60008181526008602052604081206107e0908461105c565b6000838152600860205260408120919250906107fc9083611078565b6000858152600860205260409020909250610819915085836110cb565b506040516001600160a01b0385169082156108fc029083906000818181858888f193505050501580156105cc573d6000803e3d6000fd5b600c6020526000908152604090205481565b60035460009083906001600160a01b031633148061089e5750600081815260066020908152604080832033845290915290205460ff1615156001145b6108ba5760405162461bcd60e51b815260040161046a90612344565b6108c384610a68565b6108df5760405162461bcd60e51b815260040161046a90612458565b6108ea858585611176565b6000848152600c602052604081208054859290610908908490612930565b909155505060008481526007602052604090206109269086856110cb565b95945050505050565b60008281526005602052604090205482906001600160a01b0316156109665760405162461bcd60e51b815260040161046a90612687565b60035483906001600160a01b031633148061099f5750600081815260066020908152604080832033845290915290205460ff1615156001145b6109bb5760405162461bcd60e51b815260040161046a90612344565b6109c484610c06565b6109e05760405162461bcd60e51b815260040161046a906126be565b6109ea8486611285565b6000848152600c6020908152604080832060019055600b82529091208451610a1492860190611a04565b5060405184906001600160a01b038716907f1c99a3094efa6e992469bc3c39571effd2c0bb7c5c0e6b4dfbe767b3d2da142c90600090a35050505050565b610a64610a5d610e87565b8383611309565b5050565b600160ff1b161590565b6003546001600160a01b03165b90565b63bc197c8160e01b98975050505050505050565b60035460009084906001600160a01b0316331480610ad25750600081815260066020908152604080832033845290915290205460ff1615156001145b610aee5760405162461bcd60e51b815260040161046a90612344565b610af785610a68565b610b135760405162461bcd60e51b815260040161046a90612584565b610b1f868686866113ac565b60008581526009602090815260408083206001600160a01b038a16845290915290205460ff1615610b8d576000858152600c602052604081208054869290610b689084906128d9565b90915550506000858152600760205260409020610b8690878661149b565b9150610bf2565b6000858152600c602052604081208054869290610bab9084906128d9565b909155505060008581526009602090815260408083206001600160a01b038a1684528252808320805460ff1916600117905587835260079091529020610b8690878661150d565b50949350505050565b63f23a6e6160e01b81565b600160ff1b9081161490565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b63f23a6e6160e01b9695505050505050565b610c5a610e87565b6001600160a01b0316856001600160a01b03161480610c805750610c80856103d5610e87565b610c9c5760405162461bcd60e51b815260040161046a9061253c565b610ca583610a68565b15610cf057610cb7858585858561166f565b6000838152600760205260409020610cd09086846110cb565b506000838152600760205260409020610cea90858461149b565b506105cc565b846001600160a01b0316610d0384610669565b6001600160a01b031614610d295760405162461bcd60e51b815260040161046a9061265e565b6105cc8385611285565b6003546001600160a01b03163314610d5d5760405162461bcd60e51b815260040161046a90612344565b610d6681610a68565b610d825760405162461bcd60e51b815260040161046a9061270b565b346000808060015b6000868152600760205260409020610da290826117a3565b15610e23576000868152600760205260409020610dbf9082611078565b6000888152600c60205260409020549195509350610dea908690610de49086906117ae565b906117ba565b9150610e1084610dfb846064612911565b6000898152600860205260409020919061150d565b50610e1c6001826128d9565b9050610d8a565b50847f37dc85b4c5675703b4cd256ce394429805a35dfb7927cb9752de79f9e8c6aa6685604051610e549190612876565b60405180910390a25050505050565b63bc197c8160e01b81565b6001600160e01b031981166301ffc9a760e01b14919050565b3390565b8151835114610eac5760405162461bcd60e51b815260040161046a906127ed565b6001600160a01b038416610ed25760405162461bcd60e51b815260040161046a906124a5565b6000610edc610e87565b9050610eec818787878787611054565b60005b8451811015610fee576000858281518110610f1a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610f4657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610f965760405162461bcd60e51b815260040161046a90612614565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610fd39084906128d9565b9250508190555050505080610fe790612982565b9050610eef565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161103e929190612250565b60405180910390a46110548187878787876117c6565b505050505050565b6001600160a01b03166000908152602091909152604090205490565b60008083600101838154811061109e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b03168083529590526040902060010154939492505050565b6001600160a01b03821660009081526020849052604081205480801580159061112e575085600101828154811061111257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b156111685761113d8482612930565b6001600160a01b0386166000908152602088905260409020600190810191909155925061116f915050565b6000925050505b9392505050565b6001600160a01b03831661119c5760405162461bcd60e51b815260040161046a906125d1565b60006111a6610e87565b90506111d6818560006111b8876118d4565b6111c1876118d4565b60405180602001604052806000815250611054565b6000838152602081815260408083206001600160a01b0388168452909152902054828110156112175760405162461bcd60e51b815260040161046a90612414565b6000848152602081815260408083206001600160a01b03808a16808652919093528184208786039055905190918516907fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6290611276908990899061287f565b60405180910390a45050505050565b60035482906001600160a01b03163314806112be5750600081815260066020908152604080832033845290915290205460ff1615156001145b6112da5760405162461bcd60e51b815260040161046a90612344565b5060009182526005602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b816001600160a01b0316836001600160a01b0316141561133b5760405162461bcd60e51b815260040161046a9061275b565b6001600160a01b0383811660008181526001602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c319061139f908590612275565b60405180910390a3505050565b6001600160a01b0384166113d25760405162461bcd60e51b815260040161046a90612835565b60006113dc610e87565b90506113fd816000876113ee886118d4565b6113f7886118d4565b87611054565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061142d9084906128d9565b92505081905550846001600160a01b031660006001600160a01b0316826001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62878760405161148492919061287f565b60405180910390a46105cc8160008787878761192d565b6001600160a01b0382166000908152602084905260408120548080158015906114fe57508560010182815481106114e257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b156111685761113d84826128d9565b6001600160a01b0382166000908152602084905260408120548015158061156e575084600101818154811061155257634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600160a01b900460ff1615156001145b1561157d57600091505061116f565b60018086015461158c916128d9565b60018087018054820181556001600160a01b038716600090815260208990526040902083815590910185905580549192508591839081106115dd57634e487b7160e01b600052603260045260246000fd5b600091825260209091200180546001600160a01b0319166001600160a01b0392909216919091179055600185810180548390811061162b57634e487b7160e01b600052603260045260246000fd5b600091825260208220018054921515600160a01b0260ff60a01b19909316929092179091556002860180549161166083612982565b9190505550600191505061116f565b6001600160a01b0384166116955760405162461bcd60e51b815260040161046a906124a5565b600061169f610e87565b90506116b08187876113ee886118d4565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156116f15760405162461bcd60e51b815260040161046a90612614565b6000858152602081815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061172e9084906128d9565b92505081905550856001600160a01b0316876001600160a01b0316836001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62888860405161178492919061287f565b60405180910390a461179a82888888888861192d565b50505050505050565b600191909101541190565b600061116f82846128f1565b600061116f8284612911565b6117d8846001600160a01b03166119fe565b156110545760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611811908990899088908890889060040161219a565b602060405180830381600087803b15801561182b57600080fd5b505af192505050801561185b575060408051601f3d908101601f19168201909252611858918101906120cd565b60015b6118a4576118676129cf565b80611872575061188c565b8060405162461bcd60e51b815260040161046a9190612295565b60405162461bcd60e51b815260040161046a906122a8565b6001600160e01b0319811663bc197c8160e01b1461179a5760405162461bcd60e51b815260040161046a906122fc565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061191c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b61193f846001600160a01b03166119fe565b156110545760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061197890899089908890889088906004016121f8565b602060405180830381600087803b15801561199257600080fd5b505af19250505080156119c2575060408051601f3d908101601f191682019092526119bf918101906120cd565b60015b6119ce576118676129cf565b6001600160e01b0319811663f23a6e6160e01b1461179a5760405162461bcd60e51b815260040161046a906122fc565b3b151590565b828054611a1090612947565b90600052602060002090601f016020900481019282611a325760008555611a78565b82601f10611a4b57805160ff1916838001178555611a78565b82800160010185558215611a78579182015b82811115611a78578251825591602001919060010190611a5d565b50611a84929150611a88565b5090565b5b80821115611a845760008155600101611a89565b60006001600160401b03831115611ab657611ab66129b3565b611ac9601f8401601f191660200161288d565b9050828152838383011115611add57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b03811681146104dc57600080fd5b60008083601f840112611b1c578182fd5b5081356001600160401b03811115611b32578182fd5b6020830191508360208083028501011115611b4c57600080fd5b9250929050565b600082601f830112611b63578081fd5b81356020611b78611b73836128b6565b61288d565b8281528181019085830183850287018401881015611b94578586fd5b855b85811015611bb257813584529284019290840190600101611b96565b5090979650505050505050565b803580151581146104dc57600080fd5b60008083601f840112611be0578182fd5b5081356001600160401b03811115611bf6578182fd5b602083019150836020828501011115611b4c57600080fd5b600082601f830112611c1e578081fd5b61116f83833560208501611a9d565b60008060408385031215611c3f578182fd5b611c4883611af4565b9150611c5660208401611af4565b90509250929050565b60008060008060008060008060a0898b031215611c7a578384fd5b611c8389611af4565b9750611c9160208a01611af4565b965060408901356001600160401b0380821115611cac578586fd5b611cb88c838d01611b0b565b909850965060608b0135915080821115611cd0578586fd5b611cdc8c838d01611b0b565b909650945060808b0135915080821115611cf4578384fd5b50611d018b828c01611bcf565b999c989b5096995094979396929594505050565b600080600080600060a08688031215611d2c578081fd5b611d3586611af4565b9450611d4360208701611af4565b935060408601356001600160401b0380821115611d5e578283fd5b611d6a89838a01611b53565b94506060880135915080821115611d7f578283fd5b611d8b89838a01611b53565b93506080880135915080821115611da0578283fd5b50611dad88828901611c0e565b9150509295509295909350565b60008060008060008060a08789031215611dd2578182fd5b611ddb87611af4565b9550611de960208801611af4565b9450604087013593506060870135925060808701356001600160401b03811115611e11578283fd5b611e1d89828a01611bcf565b979a9699509497509295939492505050565b600080600080600060a08688031215611e46578081fd5b611e4f86611af4565b9450611e5d60208701611af4565b9350604086013592506060860135915060808601356001600160401b03811115611e85578182fd5b611dad88828901611c0e565b60008060408385031215611ea3578182fd5b611eac83611af4565b9150611c5660208401611bbf565b60008060408385031215611ecc578182fd5b611ed583611af4565b946020939093013593505050565b600080600060608486031215611ef7578081fd5b611f0084611af4565b92506020840135915060408401356001600160401b03811115611f21578182fd5b8401601f81018613611f31578182fd5b611f4086823560208401611a9d565b9150509250925092565b600080600060608486031215611f5e578081fd5b611f6784611af4565b95602085013595506040909401359392505050565b60008060008060808587031215611f91578182fd5b611f9a85611af4565b9350602085013592506040850135915060608501356001600160401b03811115611fc2578182fd5b611fce87828801611c0e565b91505092959194509250565b60008060408385031215611fec578182fd5b82356001600160401b0380821115612002578384fd5b818501915085601f830112612015578384fd5b81356020612025611b73836128b6565b82815281810190858301838502870184018b1015612041578889fd5b8896505b8487101561206a5761205681611af4565b835260019690960195918301918301612045565b5096505086013592505080821115612080578283fd5b5061208d85828601611b53565b9150509250929050565b6000602082840312156120a8578081fd5b61116f82611bbf565b6000602082840312156120c2578081fd5b813561116f81612a73565b6000602082840312156120de578081fd5b815161116f81612a73565b6000602082840312156120fa578081fd5b5035919050565b6000815180845260208085019450808401835b8381101561213057815187529582019590820190600101612114565b509495945050505050565b60008151808452815b8181101561216057602081850181015186830182015201612144565b818111156121715782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a0604082018190526000906121c690830186612101565b82810360608401526121d88186612101565b905082810360808401526121ec818561213b565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906122329083018461213b565b979650505050505050565b60006020825261116f6020830184612101565b6000604082526122636040830185612101565b82810360208401526109268185612101565b901515815260200190565b6001600160e01b031991909116815260200190565b60006020825261116f602083018461213b565b60208082526034908201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356040820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606082015260800190565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252601f908201527f596f752063616e6e6f7420706572666f726d207468697320616374696f6e2e00604082015260600190565b6020808252602b908201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60408201526a65726f206164647265737360a81b606082015260800190565b6020808252602e908201527f54524945445f544f5f434c41494d5f4449564944454e445f464f525f4e4f4e5f60408201526d232aa723a4a12622afaa27a5a2a760911b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6020808252602d908201527f54524945445f544f5f4255524e5f46554e4749424c455f464f525f4e4f4e5f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526032908201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b60208082526028908201527f455243313135353a2043414c4c45525f49535f4e4f545f4f574e45525f4f525f6040820152671054141493d5915160c21b606082015260800190565b6020808252602d908201527f54524945445f544f5f4d494e545f4e4f4e5f46554e4749424c455f464f525f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600f908201526e2bb937b7339027232a1037bbb732b960891b604082015260600190565b6020808252601e908201527f4e465420697320616c7265616479206f776e6564206279206f74686572730000604082015260600190565b6020808252602d908201527f54524945445f544f5f4d494e545f46554e4749424c455f464f525f4e4f4e5f4660408201526c2aa723a4a12622afaa27a5a2a760991b606082015260800190565b60208082526030908201527f54524945445f544f5f50524f564944455f4449564944454e445f464f525f4e4f60408201526f272fa32aa723a4a12622afaa27a5a2a760811b606082015260800190565b60208082526029908201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604082015268103337b91039b2b63360b91b606082015260800190565b60208082526029908201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604082015268040dad2e6dac2e8c6d60bb1b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b90815260200190565b918252602082015260400190565b6040518181016001600160401b03811182821017156128ae576128ae6129b3565b604052919050565b60006001600160401b038211156128cf576128cf6129b3565b5060209081020190565b600082198211156128ec576128ec61299d565b500190565b60008261290c57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561292b5761292b61299d565b500290565b6000828210156129425761294261299d565b500390565b60028104600182168061295b57607f821691505b6020821081141561297c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156129965761299661299d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60e01c90565b600060443d10156129df57610a7f565b600481823e6308c379a06129f382516129c9565b146129fd57610a7f565b6040513d600319016004823e80513d6001600160401b038160248401118184111715612a2c5750505050610a7f565b82840192508251915080821115612a465750505050610a7f565b503d83016020828401011115612a5e57505050610a7f565b601f01601f1916810160200160405291505090565b6001600160e01b031981168114612a8957600080fd5b5056fea26469706673582212201498260b605b97dd7b8ac8cc3f38eba1067e700bdf651581830ed2af22ff764e64736f6c63430008000033a264697066735822122035c452ec91ed80ec633f28e48c666c6fdcb9e4463072c14b103484754110c1e964736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2890,
        "contract": "contracts/TokenFactory.sol:TokenFactory",
        "label": "_tokenAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}