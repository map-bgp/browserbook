{
  "address": "0xA1f8746Dc231b06211ee1f821a62c458B9a8935C",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeAssetProxyId",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeERC1155AssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenValues",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "callbackData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeERC20AssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeERC20BridgeAssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bridgeAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "bridgeData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeERC721AssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeMultiAssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "nestedAssetData",
          "type": "bytes[]"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "decodeStaticCallAssetData",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "assetProxyId",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "staticCallTargetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "staticCallData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "expectedReturnDataHash",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenValues",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "callbackData",
          "type": "bytes"
        }
      ],
      "name": "encodeERC1155AssetData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "encodeERC20AssetData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "encodeERC721AssetData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes[]",
          "name": "nestedAssetData",
          "type": "bytes[]"
        }
      ],
      "name": "encodeMultiAssetData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "staticCallTargetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "staticCallData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "expectedReturnDataHash",
          "type": "bytes32"
        }
      ],
      "name": "encodeStaticCallAssetData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "assetData",
          "type": "bytes"
        }
      ],
      "name": "revertIfInvalidAssetData",
      "outputs": [],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x877d7f5eb7158b79f141bb2492c48d4f0a7c531c6692a702a7739bf9218b949c",
  "receipt": {
    "to": null,
    "from": "0x468929A0DAC6D5A1c7BA1ab09c0862195D63b18c",
    "contractAddress": "0xA1f8746Dc231b06211ee1f821a62c458B9a8935C",
    "transactionIndex": 0,
    "gasUsed": "1272651",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xc3e01efa3f5820b08170473ba9ddd770934e7a12a5eeea470c0e01c480f10704",
    "transactionHash": "0x877d7f5eb7158b79f141bb2492c48d4f0a7c531c6692a702a7739bf9218b949c",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "1272651",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d4d5df6755b1f719201cd99bd7e5e31a",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeAssetProxyId\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC1155AssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenValues\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC20AssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC20BridgeAssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bridgeAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bridgeData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeERC721AssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeMultiAssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"nestedAssetData\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"decodeStaticCallAssetData\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"assetProxyId\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"staticCallTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"staticCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"expectedReturnDataHash\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenValues\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"callbackData\",\"type\":\"bytes\"}],\"name\":\"encodeERC1155AssetData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"encodeERC20AssetData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"encodeERC721AssetData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"nestedAssetData\",\"type\":\"bytes[]\"}],\"name\":\"encodeMultiAssetData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"staticCallTargetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"staticCallData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"expectedReturnDataHash\",\"type\":\"bytes32\"}],\"name\":\"encodeStaticCallAssetData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"assetData\",\"type\":\"bytes\"}],\"name\":\"revertIfInvalidAssetData\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"decodeAssetProxyId(bytes)\":{\"details\":\"Decode AssetProxy identifier\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\"},\"return\":\"The AssetProxy identifier\"},\"decodeERC1155AssetData(bytes)\":{\"details\":\"Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing an ERC-1155 set of assets.\"},\"return\":\"The ERC-1155 AssetProxy identifier, the address of the ERC-1155 contract hosting the assets, an array of the identifiers of the assets to be traded, an array of asset amounts to be traded, and callback data.  Each element of the arrays corresponds to the same-indexed element of the other array.  Return values specified as `memory` are returned as pointers to locations within the memory of the input parameter `assetData`.\"},\"decodeERC20AssetData(bytes)\":{\"details\":\"Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing an ERC-20 asset.\"},\"return\":\"The AssetProxy identifier, and the address of the ERC-20 contract hosting this asset.\"},\"decodeERC20BridgeAssetData(bytes)\":{\"details\":\"Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing an ERC20Bridge asset\"},\"return\":\"The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address of the bridge contract, and extra data to be passed to the bridge contract.\"},\"decodeERC721AssetData(bytes)\":{\"details\":\"Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing an ERC-721 asset.\"},\"return\":\"The ERC-721 AssetProxy identifier, the address of the ERC-721 contract hosting this asset, and the identifier of the specific asset to be traded.\"},\"decodeMultiAssetData(bytes)\":{\"details\":\"Decode multi-asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant data describing a multi-asset basket.\"},\"return\":\"The Multi-Asset AssetProxy identifier, an array of the amounts of the assets to be traded, and an array of the AssetProxy-compliant data describing each asset to be traded.  Each element of the arrays corresponds to the same-indexed element of the other array.\"},\"decodeStaticCallAssetData(bytes)\":{\"details\":\"Decode StaticCall asset data from the format described in the AssetProxy contract specification.\",\"params\":{\"assetData\":\"AssetProxy-compliant asset data describing a StaticCall asset\"},\"return\":\"The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be passed to the target address, and the expected Keccak-256 hash of the static call return data.\"},\"encodeERC1155AssetData(address,uint256[],uint256[],bytes)\":{\"details\":\"Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\",\"params\":{\"callbackData\":\"Data to be passed to receiving contracts when a transfer is performed.\",\"tokenAddress\":\"The address of the ERC-1155 contract hosting the asset(s) to be traded.\",\"tokenIds\":\"The identifiers of the specific assets to be traded.\",\"tokenValues\":\"The amounts of each asset to be traded.\"},\"return\":\"AssetProxy-compliant asset data describing the set of assets.\"},\"encodeERC20AssetData(address)\":{\"details\":\"Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\",\"params\":{\"tokenAddress\":\"The address of the ERC-20 contract hosting the asset to be traded.\"},\"return\":\"AssetProxy-compliant data describing the asset.\"},\"encodeERC721AssetData(address,uint256)\":{\"details\":\"Encode ERC-721 asset data into the format described in the AssetProxy specification.\",\"params\":{\"tokenAddress\":\"The address of the ERC-721 contract hosting the asset to be traded.\",\"tokenId\":\"The identifier of the specific asset to be traded.\"},\"return\":\"AssetProxy-compliant asset data describing the asset.\"},\"encodeMultiAssetData(uint256[],bytes[])\":{\"details\":\"Encode data for multiple assets, per the AssetProxy contract specification.\",\"params\":{\"amounts\":\"The amounts of each asset to be traded.\",\"nestedAssetData\":\"AssetProxy-compliant data describing each asset to be traded.\"},\"return\":\"AssetProxy-compliant data describing the set of assets.\"},\"encodeStaticCallAssetData(address,bytes,bytes32)\":{\"details\":\"Encode StaticCall asset data into the format described in the AssetProxy contract specification.\",\"params\":{\"expectedReturnDataHash\":\"Expected Keccak-256 hash of the StaticCall return data.\",\"staticCallData\":\"Data that will be passed to staticCallTargetAddress in the StaticCall.\",\"staticCallTargetAddress\":\"Target address of StaticCall.\"},\"return\":\"AssetProxy-compliant asset data describing the set of assets.\"},\"revertIfInvalidAssetData(bytes)\":{\"details\":\"Reverts if assetData is not of a valid format for its given proxy id.\",\"params\":{\"assetData\":\"AssetProxy compliant asset data.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/0x/dev-utils/LibAssetData.sol\":\"LibAssetData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\n// solhint-disable\\npragma solidity ^0.5.9;\\npragma experimental ABIEncoderV2;\\n\\n\\n// @dev Interface of the asset proxy's assetData.\\n// The asset proxies take an ABI encoded `bytes assetData` as argument.\\n// This argument is ABI encoded as one of the methods of this interface.\\ninterface IAssetData {\\n\\n    /// @dev Function signature for encoding ERC20 assetData.\\n    /// @param tokenAddress Address of ERC20Token contract.\\n    function ERC20Token(address tokenAddress)\\n        external;\\n\\n    /// @dev Function signature for encoding ERC721 assetData.\\n    /// @param tokenAddress Address of ERC721 token contract.\\n    /// @param tokenId Id of ERC721 token to be transferred.\\n    function ERC721Token(\\n        address tokenAddress,\\n        uint256 tokenId\\n    )\\n        external;\\n\\n    /// @dev Function signature for encoding ERC1155 assetData.\\n    /// @param tokenAddress Address of ERC1155 token contract.\\n    /// @param tokenIds Array of ids of tokens to be transferred.\\n    /// @param values Array of values that correspond to each token id to be transferred.\\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\\n    /// @param callbackData Extra data to be passed to receiver's `onERC1155Received` callback function.\\n    function ERC1155Assets(\\n        address tokenAddress,\\n        uint256[] calldata tokenIds,\\n        uint256[] calldata values,\\n        bytes calldata callbackData\\n    )\\n        external;\\n\\n    /// @dev Function signature for encoding MultiAsset assetData.\\n    /// @param values Array of amounts that correspond to each asset to be transferred.\\n    ///        Note that each value will be multiplied by the amount being filled in the order before transferring.\\n    /// @param nestedAssetData Array of assetData fields that will be be dispatched to their correspnding AssetProxy contract.\\n    function MultiAsset(\\n        uint256[] calldata values,\\n        bytes[] calldata nestedAssetData\\n    )\\n        external;\\n\\n    /// @dev Function signature for encoding StaticCall assetData.\\n    /// @param staticCallTargetAddress Address that will execute the staticcall.\\n    /// @param staticCallData Data that will be executed via staticcall on the staticCallTargetAddress.\\n    /// @param expectedReturnDataHash Keccak-256 hash of the expected staticcall return data.\\n    function StaticCall(\\n        address staticCallTargetAddress,\\n        bytes calldata staticCallData,\\n        bytes32 expectedReturnDataHash\\n    )\\n        external;\\n\\n    /// @dev Function signature for encoding ERC20Bridge assetData.\\n    /// @param tokenAddress Address of token to transfer.\\n    /// @param bridgeAddress Address of the bridge contract.\\n    /// @param bridgeData Arbitrary data to be passed to the bridge contract.\\n    function ERC20Bridge(\\n        address tokenAddress,\\n        address bridgeAddress,\\n        bytes calldata bridgeData\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x3ceff1522c201d446ee98d9ecd912ad2ca6adc6fae9fc10d458ff557d570decc\"},\"@0x/contracts-utils/contracts/src/LibBytes.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\nimport \\\"./LibBytesRichErrors.sol\\\";\\nimport \\\"./LibRichErrors.sol\\\";\\n\\n\\nlibrary LibBytes {\\n\\n    using LibBytes for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input)\\n        internal\\n        pure\\n        returns (uint256 memoryAddress)\\n    {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    )\\n        internal\\n        pure\\n    {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} lt(source, sEnd) {} {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {} slt(dest, dEnd) {} {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(\\n            result.contentAddress(),\\n            b.contentAddress() + from,\\n            result.length\\n        );\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    )\\n        internal\\n        pure\\n        returns (bytes memory result)\\n    {\\n        // Ensure that the from and to positions are valid positions for a slice within\\n        // the byte array that is being used.\\n        if (from > to) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.FromLessThanOrEqualsToRequired,\\n                from,\\n                to\\n            ));\\n        }\\n        if (to > b.length) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.ToLessThanOrEqualsLengthRequired,\\n                to,\\n                b.length\\n            ));\\n        }\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return The byte that was popped off.\\n    function popLastByte(bytes memory b)\\n        internal\\n        pure\\n        returns (bytes1 result)\\n    {\\n        if (b.length == 0) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanZeroRequired,\\n                b.length,\\n                0\\n            ));\\n        }\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return True if arrays are the same. False otherwise.\\n    function equals(\\n        bytes memory lhs,\\n        bytes memory rhs\\n    )\\n        internal\\n        pure\\n        returns (bool equal)\\n    {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 20) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsTwentyRequired,\\n                b.length,\\n                index + 20 // 20 is length of address\\n            ));\\n        }\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return bytes32 value from byte array.\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    )\\n        internal\\n        pure\\n    {\\n        if (b.length < index + 32) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsThirtyTwoRequired,\\n                b.length,\\n                index + 32\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    )\\n        internal\\n        pure\\n    {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return bytes4 value from byte array.\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        if (b.length < index + 4) {\\n            LibRichErrors.rrevert(LibBytesRichErrors.InvalidByteOperationError(\\n                LibBytesRichErrors.InvalidByteOperationErrorCodes.LengthGreaterThanOrEqualsFourRequired,\\n                b.length,\\n                index + 4\\n            ));\\n        }\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a new length to a byte array.\\n    ///      Decreasing length will lead to removing the corresponding lower order bytes from the byte array.\\n    ///      Increasing length may lead to appending adjacent in-memory bytes to the end of the byte array.\\n    /// @param b Bytes array to write new length to.\\n    /// @param length New length of byte array.\\n    function writeLength(bytes memory b, uint256 length)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            mstore(b, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xab487522b79e5c07751c44d3c6a45ea42f526f065168a1d0f214a1cc6d24ca84\"},\"@0x/contracts-utils/contracts/src/LibBytesRichErrors.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\nlibrary LibBytesRichErrors {\\n\\n    enum InvalidByteOperationErrorCodes {\\n        FromLessThanOrEqualsToRequired,\\n        ToLessThanOrEqualsLengthRequired,\\n        LengthGreaterThanZeroRequired,\\n        LengthGreaterThanOrEqualsFourRequired,\\n        LengthGreaterThanOrEqualsTwentyRequired,\\n        LengthGreaterThanOrEqualsThirtyTwoRequired,\\n        LengthGreaterThanOrEqualsNestedBytesLengthRequired,\\n        DestinationLengthGreaterThanOrEqualSourceLengthRequired\\n    }\\n\\n    // bytes4(keccak256(\\\"InvalidByteOperationError(uint8,uint256,uint256)\\\"))\\n    bytes4 internal constant INVALID_BYTE_OPERATION_ERROR_SELECTOR =\\n        0x28006595;\\n\\n    // solhint-disable func-name-mixedcase\\n    function InvalidByteOperationError(\\n        InvalidByteOperationErrorCodes errorCode,\\n        uint256 offset,\\n        uint256 required\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            INVALID_BYTE_OPERATION_ERROR_SELECTOR,\\n            errorCode,\\n            offset,\\n            required\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xec98fecbab306abab18ccfcb83cdd1ed0b1c70e5ced2259835a2b61eae2d69d1\"},\"@0x/contracts-utils/contracts/src/LibRichErrors.sol\":{\"content\":\"/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity ^0.5.9;\\n\\n\\nlibrary LibRichErrors {\\n\\n    // bytes4(keccak256(\\\"Error(string)\\\"))\\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\\n        0x08c379a0;\\n\\n    // solhint-disable func-name-mixedcase\\n    /// @dev ABI encode a standard, string revert error payload.\\n    ///      This is the same payload that would be included by a `revert(string)`\\n    ///      solidity statement. It has the function signature `Error(string)`.\\n    /// @param message The error string.\\n    /// @return The ABI encoded error.\\n    function StandardError(\\n        string memory message\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encodeWithSelector(\\n            STANDARD_ERROR_SELECTOR,\\n            bytes(message)\\n        );\\n    }\\n    // solhint-enable func-name-mixedcase\\n\\n    /// @dev Reverts an encoded rich revert reason `errorData`.\\n    /// @param errorData ABI encoded error data.\\n    function rrevert(bytes memory errorData)\\n        internal\\n        pure\\n    {\\n        assembly {\\n            revert(add(errorData, 0x20), mload(errorData))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3ce6ded2fea3cc80998ca4d364bda530e273af0ba1c78d22a6cdadb6f64186e\"},\"contracts/0x/dev-utils/LibAssetData.sol\":{\"content\":\"/*\\r\\n\\r\\n  Copyright 2019 ZeroEx Intl.\\r\\n\\r\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\r\\n  you may not use this file except in compliance with the License.\\r\\n  You may obtain a copy of the License at\\r\\n\\r\\n    http://www.apache.org/licenses/LICENSE-2.0\\r\\n\\r\\n  Unless required by applicable law or agreed to in writing, software\\r\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\r\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\r\\n  See the License for the specific language governing permissions and\\r\\n  limitations under the License.\\r\\n\\r\\n*/\\r\\n\\r\\npragma solidity ^0.5.16;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@0x/contracts-utils/contracts/src/LibBytes.sol\\\";\\r\\nimport \\\"@0x/contracts-asset-proxy/contracts/src/interfaces/IAssetData.sol\\\";\\r\\n\\r\\n\\r\\nlibrary LibAssetData {\\r\\n\\r\\n    using LibBytes for bytes;\\r\\n\\r\\n    /// @dev Decode AssetProxy identifier\\r\\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset.\\r\\n    /// @return The AssetProxy identifier\\r\\n    function decodeAssetProxyId(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector ||\\r\\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector ||\\r\\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector ||\\r\\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector ||\\r\\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n        return assetProxyId;\\r\\n    }\\r\\n\\r\\n    /// @dev Encode ERC-20 asset data into the format described in the AssetProxy contract specification.\\r\\n    /// @param tokenAddress The address of the ERC-20 contract hosting the asset to be traded.\\r\\n    /// @return AssetProxy-compliant data describing the asset.\\r\\n    function encodeERC20AssetData(address tokenAddress)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory assetData)\\r\\n    {\\r\\n        assetData = abi.encodeWithSelector(IAssetData(address(0)).ERC20Token.selector, tokenAddress);\\r\\n        return assetData;\\r\\n    }\\r\\n\\r\\n    /// @dev Decode ERC-20 asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-20 asset.\\r\\n    /// @return The AssetProxy identifier, and the address of the ERC-20\\r\\n    /// contract hosting this asset.\\r\\n    function decodeERC20AssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            address tokenAddress\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).ERC20Token.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        tokenAddress = assetData.readAddress(16);\\r\\n        return (assetProxyId, tokenAddress);\\r\\n    }\\r\\n\\r\\n    /// @dev Encode ERC-721 asset data into the format described in the AssetProxy specification.\\r\\n    /// @param tokenAddress The address of the ERC-721 contract hosting the asset to be traded.\\r\\n    /// @param tokenId The identifier of the specific asset to be traded.\\r\\n    /// @return AssetProxy-compliant asset data describing the asset.\\r\\n    function encodeERC721AssetData(address tokenAddress, uint256 tokenId)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory assetData)\\r\\n    {\\r\\n        assetData = abi.encodeWithSelector(\\r\\n            IAssetData(address(0)).ERC721Token.selector,\\r\\n            tokenAddress,\\r\\n            tokenId\\r\\n        );\\r\\n        return assetData;\\r\\n    }\\r\\n\\r\\n    /// @dev Decode ERC-721 asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-721 asset.\\r\\n    /// @return The ERC-721 AssetProxy identifier, the address of the ERC-721\\r\\n    /// contract hosting this asset, and the identifier of the specific\\r\\n    /// asset to be traded.\\r\\n    function decodeERC721AssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            address tokenAddress,\\r\\n            uint256 tokenId\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).ERC721Token.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        tokenAddress = assetData.readAddress(16);\\r\\n        tokenId = assetData.readUint256(36);\\r\\n        return (assetProxyId, tokenAddress, tokenId);\\r\\n    }\\r\\n\\r\\n    /// @dev Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.\\r\\n    /// @param tokenAddress The address of the ERC-1155 contract hosting the asset(s) to be traded.\\r\\n    /// @param tokenIds The identifiers of the specific assets to be traded.\\r\\n    /// @param tokenValues The amounts of each asset to be traded.\\r\\n    /// @param callbackData Data to be passed to receiving contracts when a transfer is performed.\\r\\n    /// @return AssetProxy-compliant asset data describing the set of assets.\\r\\n    function encodeERC1155AssetData(\\r\\n        address tokenAddress,\\r\\n        uint256[] memory tokenIds,\\r\\n        uint256[] memory tokenValues,\\r\\n        bytes memory callbackData\\r\\n    )\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory assetData)\\r\\n    {\\r\\n        assetData = abi.encodeWithSelector(\\r\\n            IAssetData(address(0)).ERC1155Assets.selector,\\r\\n            tokenAddress,\\r\\n            tokenIds,\\r\\n            tokenValues,\\r\\n            callbackData\\r\\n        );\\r\\n        return assetData;\\r\\n    }\\r\\n\\r\\n    /// @dev Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant asset data describing an ERC-1155 set of assets.\\r\\n    /// @return The ERC-1155 AssetProxy identifier, the address of the ERC-1155\\r\\n    /// contract hosting the assets, an array of the identifiers of the\\r\\n    /// assets to be traded, an array of asset amounts to be traded, and\\r\\n    /// callback data.  Each element of the arrays corresponds to the\\r\\n    /// same-indexed element of the other array.  Return values specified as\\r\\n    /// `memory` are returned as pointers to locations within the memory of\\r\\n    /// the input parameter `assetData`.\\r\\n    function decodeERC1155AssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            address tokenAddress,\\r\\n            uint256[] memory tokenIds,\\r\\n            uint256[] memory tokenValues,\\r\\n            bytes memory callbackData\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).ERC1155Assets.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        assembly {\\r\\n            // Skip selector and length to get to the first parameter:\\r\\n            assetData := add(assetData, 36)\\r\\n            // Read the value of the first parameter:\\r\\n            tokenAddress := mload(assetData)\\r\\n            // Point to the next parameter's data:\\r\\n            tokenIds := add(assetData, mload(add(assetData, 32)))\\r\\n            // Point to the next parameter's data:\\r\\n            tokenValues := add(assetData, mload(add(assetData, 64)))\\r\\n            // Point to the next parameter's data:\\r\\n            callbackData := add(assetData, mload(add(assetData, 96)))\\r\\n        }\\r\\n\\r\\n        return (\\r\\n            assetProxyId,\\r\\n            tokenAddress,\\r\\n            tokenIds,\\r\\n            tokenValues,\\r\\n            callbackData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Encode data for multiple assets, per the AssetProxy contract specification.\\r\\n    /// @param amounts The amounts of each asset to be traded.\\r\\n    /// @param nestedAssetData AssetProxy-compliant data describing each asset to be traded.\\r\\n    /// @return AssetProxy-compliant data describing the set of assets.\\r\\n    function encodeMultiAssetData(uint256[] memory amounts, bytes[] memory nestedAssetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory assetData)\\r\\n    {\\r\\n        assetData = abi.encodeWithSelector(\\r\\n            IAssetData(address(0)).MultiAsset.selector,\\r\\n            amounts,\\r\\n            nestedAssetData\\r\\n        );\\r\\n        return assetData;\\r\\n    }\\r\\n\\r\\n    /// @dev Decode multi-asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant data describing a multi-asset basket.\\r\\n    /// @return The Multi-Asset AssetProxy identifier, an array of the amounts\\r\\n    /// of the assets to be traded, and an array of the\\r\\n    /// AssetProxy-compliant data describing each asset to be traded.  Each\\r\\n    /// element of the arrays corresponds to the same-indexed element of the other array.\\r\\n    function decodeMultiAssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            uint256[] memory amounts,\\r\\n            bytes[] memory nestedAssetData\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).MultiAsset.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        // solhint-disable indent\\r\\n        (amounts, nestedAssetData) = abi.decode(\\r\\n            assetData.slice(4, assetData.length),\\r\\n            (uint256[], bytes[])\\r\\n        );\\r\\n        // solhint-enable indent\\r\\n    }\\r\\n\\r\\n    /// @dev Encode StaticCall asset data into the format described in the AssetProxy contract specification.\\r\\n    /// @param staticCallTargetAddress Target address of StaticCall.\\r\\n    /// @param staticCallData Data that will be passed to staticCallTargetAddress in the StaticCall.\\r\\n    /// @param expectedReturnDataHash Expected Keccak-256 hash of the StaticCall return data.\\r\\n    /// @return AssetProxy-compliant asset data describing the set of assets.\\r\\n    function encodeStaticCallAssetData(\\r\\n        address staticCallTargetAddress,\\r\\n        bytes memory staticCallData,\\r\\n        bytes32 expectedReturnDataHash\\r\\n    )\\r\\n        public\\r\\n        pure\\r\\n        returns (bytes memory assetData)\\r\\n    {\\r\\n        assetData = abi.encodeWithSelector(\\r\\n            IAssetData(address(0)).StaticCall.selector,\\r\\n            staticCallTargetAddress,\\r\\n            staticCallData,\\r\\n            expectedReturnDataHash\\r\\n        );\\r\\n        return assetData;\\r\\n    }\\r\\n\\r\\n    /// @dev Decode StaticCall asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant asset data describing a StaticCall asset\\r\\n    /// @return The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be\\r\\n    /// passed to the target address, and the expected Keccak-256 hash of the static call return data.\\r\\n    function decodeStaticCallAssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            address staticCallTargetAddress,\\r\\n            bytes memory staticCallData,\\r\\n            bytes32 expectedReturnDataHash\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).StaticCall.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        (staticCallTargetAddress, staticCallData, expectedReturnDataHash) = abi.decode(\\r\\n            assetData.slice(4, assetData.length),\\r\\n            (address, bytes, bytes32)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.\\r\\n    /// @param assetData AssetProxy-compliant asset data describing an ERC20Bridge asset\\r\\n    /// @return The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address\\r\\n    /// of the bridge contract, and extra data to be passed to the bridge contract.\\r\\n    function decodeERC20BridgeAssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n        returns (\\r\\n            bytes4 assetProxyId,\\r\\n            address tokenAddress,\\r\\n            address bridgeAddress,\\r\\n            bytes memory bridgeData\\r\\n        )\\r\\n    {\\r\\n        assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        require(\\r\\n            assetProxyId == IAssetData(address(0)).ERC20Bridge.selector,\\r\\n            \\\"WRONG_PROXY_ID\\\"\\r\\n        );\\r\\n\\r\\n        (tokenAddress, bridgeAddress, bridgeData) = abi.decode(\\r\\n            assetData.slice(4, assetData.length),\\r\\n            (address, address, bytes)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Reverts if assetData is not of a valid format for its given proxy id.\\r\\n    /// @param assetData AssetProxy compliant asset data.\\r\\n    function revertIfInvalidAssetData(bytes memory assetData)\\r\\n        public\\r\\n        pure\\r\\n    {\\r\\n        bytes4 assetProxyId = assetData.readBytes4(0);\\r\\n\\r\\n        if (assetProxyId == IAssetData(address(0)).ERC20Token.selector) {\\r\\n            decodeERC20AssetData(assetData);\\r\\n        } else if (assetProxyId == IAssetData(address(0)).ERC721Token.selector) {\\r\\n            decodeERC721AssetData(assetData);\\r\\n        } else if (assetProxyId == IAssetData(address(0)).ERC1155Assets.selector) {\\r\\n            decodeERC1155AssetData(assetData);\\r\\n        } else if (assetProxyId == IAssetData(address(0)).MultiAsset.selector) {\\r\\n            decodeMultiAssetData(assetData);\\r\\n        } else if (assetProxyId == IAssetData(address(0)).StaticCall.selector) {\\r\\n            decodeStaticCallAssetData(assetData);\\r\\n        } else if (assetProxyId == IAssetData(address(0)).ERC20Bridge.selector) {\\r\\n            decodeERC20BridgeAssetData(assetData);\\r\\n        } else {\\r\\n            revert(\\\"WRONG_PROXY_ID\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9687ffb159f4a6fa3acfe1658c39c63f93459e27199d77423652f36e0327aeab\"}},\"version\":1}",
  "bytecode": "0x61160f610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100e95760003560e01c80639eadc83511610096578063bbb2dcf611610070578063bbb2dcf6146101ef578063ca49f47c14610211578063d3d862d114610234578063d469502814610247576100e9565b80639eadc835146101a5578063a6627e9f146101c9578063b43cffe1146101dc576100e9565b806363eb3992116100c757806363eb39921461014e578063750bdb30146101615780638f4ce47914610184576100e9565b806304a5618a146100ee57806346eb65cb14610119578063590aa8751461012e575b600080fd5b6101016100fc366004610fc1565b610267565b604051610110939291906113fe565b60405180910390f35b61012c610127366004610fc1565b6102e2565b005b61014161013c366004610ce7565b610400565b604051610110919061145a565b61014161015c366004610e6e565b610457565b61017461016f366004610fc1565b6104b4565b604051610110949392919061131f565b610197610192366004610fc1565b610532565b604051610110929190611304565b6101b86101b3366004610fc1565b61058f565b604051610110959493929190611359565b6101416101d7366004610ec9565b610607565b6101416101ea366004610dc5565b610661565b6102026101fd366004610fc1565b6106c1565b60405161011093929190611426565b61022461021f366004610fc1565b61073b565b60405161011094939291906113b9565b610141610242366004610f03565b6107ac565b61025a610255366004610fc1565b6107cb565b60405161011091906112f6565b6000808061027b848263ffffffff61087b16565b92506001600160e01b0319831663012b8bc960e11b146102b65760405162461bcd60e51b81526004016102ad90611486565b60405180910390fd5b6102c784601063ffffffff6108b416565b91506102da84602463ffffffff6108f416565b929491935050565b60006102f4828263ffffffff61087b16565b90506001600160e01b03198116630f47261b60e41b141561031f5761031882610532565b50506103fc565b6001600160e01b0319811663012b8bc960e11b14156103495761034182610267565b5050506103fc565b6001600160e01b0319811663a7cb5fb760e01b14156103755761036b8261058f565b50505050506103fc565b6001600160e01b031981166394cfcdd760e01b141561039757610341826106c1565b6001600160e01b0319811663619ce88560e11b14156103c2576103b98261073b565b505050506103fc565b6001600160e01b0319811663dc1600f360e01b14156103e4576103b9826104b4565b60405162461bcd60e51b81526004016102ad90611486565b5050565b604051606090630f47261b60e41b9061041d908490602401611227565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b919050565b60405160609063619ce88560e11b9061047890869086908690602401611287565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b9392505050565b6000808060606104ca858363ffffffff61087b16565b93506001600160e01b0319841663dc1600f360e01b146104fc5760405162461bcd60e51b81526004016102ad90611486565b845161051290869060049063ffffffff61090016565b8060200190516105259190810190610d05565b9597919650949350915050565b600080610545838263ffffffff61087b16565b91506001600160e01b03198216630f47261b60e41b146105775760405162461bcd60e51b81526004016102ad90611486565b61058883601063ffffffff6108b416565b9050915091565b600080606080806105a6868563ffffffff61087b16565b94506001600160e01b0319851663a7cb5fb760e01b146105d85760405162461bcd60e51b81526004016102ad90611486565b505050506024828101516044840151606485015160848601519496929591820184019490820184019391010190565b60405160609063012b8bc960e11b9061062690859085906024016112b6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b92915050565b60405160609063a7cb5fb760e01b90610684908790879087908790602401611235565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b949350505050565b60006060806106d6848463ffffffff61087b16565b92506001600160e01b031983166394cfcdd760e01b146107085760405162461bcd60e51b81526004016102ad90611486565b835161071e90859060049063ffffffff61090016565b8060200190516107319190810190610f62565b9395909450915050565b600080606081610751858263ffffffff61087b16565b93506001600160e01b0319841663619ce88560e11b146107835760405162461bcd60e51b81526004016102ad90611486565b845161079990869060049063ffffffff61090016565b8060200190516105259190810190610d6a565b6040516060906394cfcdd760e01b9061062690859085906024016112d1565b60006107dd828263ffffffff61087b16565b90506001600160e01b03198116630f47261b60e41b148061080e57506001600160e01b0319811663012b8bc960e11b145b8061082957506001600160e01b0319811663a7cb5fb760e01b145b8061084457506001600160e01b031981166394cfcdd760e01b145b8061085f57506001600160e01b0319811663619ce88560e11b145b6104525760405162461bcd60e51b81526004016102ad90611486565b600081600401835110156108a1576108a161089c6003855185600401610980565b61099f565b5001602001516001600160e01b03191690565b600081601401835110156108d5576108d561089c6004855185601401610980565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b60006104ad83836109a7565b6060818311156109195761091961089c60008585610980565b83518211156109325761093261089c6001848751610980565b8282036040519080825280601f01601f19166020018201604052801561095f576020820181803883390190505b5090506104ad61096e826109d1565b84610978876109d1565b0183516109d7565b6060632800659560e01b8484846040516024016104789392919061146b565b805160208201fd5b600081602001835110156109c8576109c861089c6005855185602001610980565b50016020015190565b60200190565b6020811015610a01576001816020036101000a038019835116818551168082178652505050610a78565b82821415610a0e57610a78565b82821115610a485760208103905080820181840181515b82851015610a40578451865260209586019590940193610a25565b905250610a78565b60208103905080820181840183515b81861215610a735782518252601f199283019290910190610a57565b855250505b505050565b803561065b816115af565b805161065b816115af565b600082601f830112610aa457600080fd5b8151610ab7610ab2826114bd565b611496565b81815260209384019390925082018360005b83811015610af55781518601610adf8882610ca1565b8452506020928301929190910190600101610ac9565b5050505092915050565b600082601f830112610b1057600080fd5b8135610b1e610ab2826114bd565b81815260209384019390925082018360005b83811015610af55781358601610b468882610c52565b8452506020928301929190910190600101610b30565b600082601f830112610b6d57600080fd5b8151610b7b610ab2826114bd565b91508181835260208401935060208101905083856020840282011115610ba057600080fd5b60005b83811015610af55781610bb68882610c47565b8452506020928301929190910190600101610ba3565b600082601f830112610bdd57600080fd5b8135610beb610ab2826114bd565b91508181835260208401935060208101905083856020840282011115610c1057600080fd5b60005b83811015610af55781610c268882610c3c565b8452506020928301929190910190600101610c13565b803561065b816115c3565b805161065b816115c3565b600082601f830112610c6357600080fd5b8135610c71610ab2826114de565b91508082526020830160208301858383011115610c8d57600080fd5b610c9883828461155c565b50505092915050565b600082601f830112610cb257600080fd5b8151610cc0610ab2826114de565b91508082526020830160208301858383011115610cdc57600080fd5b610c98838284611568565b600060208284031215610cf957600080fd5b60006106b98484610a7d565b600080600060608486031215610d1a57600080fd5b6000610d268686610a88565b9350506020610d3786828701610a88565b925050604084015167ffffffffffffffff811115610d5457600080fd5b610d6086828701610ca1565b9150509250925092565b600080600060608486031215610d7f57600080fd5b6000610d8b8686610a88565b935050602084015167ffffffffffffffff811115610da857600080fd5b610db486828701610ca1565b9250506040610d6086828701610c47565b60008060008060808587031215610ddb57600080fd5b6000610de78787610a7d565b945050602085013567ffffffffffffffff811115610e0457600080fd5b610e1087828801610bcc565b935050604085013567ffffffffffffffff811115610e2d57600080fd5b610e3987828801610bcc565b925050606085013567ffffffffffffffff811115610e5657600080fd5b610e6287828801610c52565b91505092959194509250565b600080600060608486031215610e8357600080fd5b6000610e8f8686610a7d565b935050602084013567ffffffffffffffff811115610eac57600080fd5b610eb886828701610c52565b9250506040610d6086828701610c3c565b60008060408385031215610edc57600080fd5b6000610ee88585610a7d565b9250506020610ef985828601610c3c565b9150509250929050565b60008060408385031215610f1657600080fd5b823567ffffffffffffffff811115610f2d57600080fd5b610f3985828601610bcc565b925050602083013567ffffffffffffffff811115610f5657600080fd5b610ef985828601610aff565b60008060408385031215610f7557600080fd5b825167ffffffffffffffff811115610f8c57600080fd5b610f9885828601610b5c565b925050602083015167ffffffffffffffff811115610fb557600080fd5b610ef985828601610a93565b600060208284031215610fd357600080fd5b813567ffffffffffffffff811115610fea57600080fd5b6106b984828501610c52565b60006104ad83836111ad565b600061100e838361119b565b505060200190565b61101f81611513565b82525050565b600061103082611506565b61103a818561150a565b93508360208202850161104c856109d1565b8060005b8581101561108657848403895281516110698582610ff6565b9450611074836109d1565b60209a909a0199925050600101611050565b5091979650505050505050565b600061109e82611506565b6110a8818561150a565b9350836020820285016110ba856109d1565b8060005b8581101561108657848403895281516110d78582610ff6565b94506110e2836109d1565b60209a909a01999250506001016110be565b60006110ff82611506565b611109818561150a565b9350611114836109d1565b8060005b8381101561114257815161112c8882611002565b9750611137836109d1565b925050600101611118565b509495945050505050565b600061115882611506565b611162818561150a565b935061116d836109d1565b8060005b838110156111425781516111858882611002565b9750611190836109d1565b925050600101611171565b61101f8161151e565b61101f81611521565b60006111b882611506565b6111c2818561150a565b93506111d2818560208601611568565b6111db81611598565b9093019392505050565b61101f81611551565b60006111fb600e8361150a565b7f57524f4e475f50524f58595f4944000000000000000000000000000000000000815260200192915050565b6020810161065b8284611016565b608081016112438287611016565b818103602083015261125581866110f4565b9050818103604083015261126981856110f4565b9050818103606083015261127d81846111ad565b9695505050505050565b606081016112958286611016565b81810360208301526112a781856111ad565b90506106b9604083018461119b565b604081016112c48285611016565b6104ad602083018461119b565b604080825281016112e281856110f4565b905081810360208301526106b98184611025565b6020810161065b82846111a4565b6040810161131282856111a4565b6104ad6020830184611016565b6080810161132d82876111a4565b61133a6020830186611016565b6113476040830185611016565b818103606083015261127d81846111ad565b60a0810161136782886111a4565b6113746020830187611016565b8181036040830152611386818661114d565b9050818103606083015261139a818561114d565b905081810360808301526113ae81846111ad565b979650505050505050565b608081016113c782876111a4565b6113d46020830186611016565b81810360408301526113e681856111ad565b90506113f5606083018461119b565b95945050505050565b6060810161140c82866111a4565b6114196020830185611016565b6106b9604083018461119b565b6060810161143482866111a4565b8181036020830152611446818561114d565b905081810360408301526113f58184611093565b602080825281016104ad81846111ad565b6060810161147982866111e5565b611419602083018561119b565b6020808252810161065b816111ee565b60405181810167ffffffffffffffff811182821017156114b557600080fd5b604052919050565b600067ffffffffffffffff8211156114d457600080fd5b5060209081020190565b600067ffffffffffffffff8211156114f557600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b600061065b82611538565b90565b6001600160e01b03191690565b80610452816115a2565b73ffffffffffffffffffffffffffffffffffffffff1690565b600061065b8261152e565b82818337506000910152565b60005b8381101561158357818101518382015260200161156b565b83811115611592576000848401525b50505050565b601f01601f191690565b600881106115ac57fe5b50565b6115b881611513565b81146115ac57600080fd5b6115b88161151e56fea365627a7a723158209efda36f3cb5141790ccdf07cc22c7a21973d0397ccfcc547e275ba75cfe9d3f6c6578706572696d656e74616cf564736f6c63430005110040",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100e95760003560e01c80639eadc83511610096578063bbb2dcf611610070578063bbb2dcf6146101ef578063ca49f47c14610211578063d3d862d114610234578063d469502814610247576100e9565b80639eadc835146101a5578063a6627e9f146101c9578063b43cffe1146101dc576100e9565b806363eb3992116100c757806363eb39921461014e578063750bdb30146101615780638f4ce47914610184576100e9565b806304a5618a146100ee57806346eb65cb14610119578063590aa8751461012e575b600080fd5b6101016100fc366004610fc1565b610267565b604051610110939291906113fe565b60405180910390f35b61012c610127366004610fc1565b6102e2565b005b61014161013c366004610ce7565b610400565b604051610110919061145a565b61014161015c366004610e6e565b610457565b61017461016f366004610fc1565b6104b4565b604051610110949392919061131f565b610197610192366004610fc1565b610532565b604051610110929190611304565b6101b86101b3366004610fc1565b61058f565b604051610110959493929190611359565b6101416101d7366004610ec9565b610607565b6101416101ea366004610dc5565b610661565b6102026101fd366004610fc1565b6106c1565b60405161011093929190611426565b61022461021f366004610fc1565b61073b565b60405161011094939291906113b9565b610141610242366004610f03565b6107ac565b61025a610255366004610fc1565b6107cb565b60405161011091906112f6565b6000808061027b848263ffffffff61087b16565b92506001600160e01b0319831663012b8bc960e11b146102b65760405162461bcd60e51b81526004016102ad90611486565b60405180910390fd5b6102c784601063ffffffff6108b416565b91506102da84602463ffffffff6108f416565b929491935050565b60006102f4828263ffffffff61087b16565b90506001600160e01b03198116630f47261b60e41b141561031f5761031882610532565b50506103fc565b6001600160e01b0319811663012b8bc960e11b14156103495761034182610267565b5050506103fc565b6001600160e01b0319811663a7cb5fb760e01b14156103755761036b8261058f565b50505050506103fc565b6001600160e01b031981166394cfcdd760e01b141561039757610341826106c1565b6001600160e01b0319811663619ce88560e11b14156103c2576103b98261073b565b505050506103fc565b6001600160e01b0319811663dc1600f360e01b14156103e4576103b9826104b4565b60405162461bcd60e51b81526004016102ad90611486565b5050565b604051606090630f47261b60e41b9061041d908490602401611227565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b919050565b60405160609063619ce88560e11b9061047890869086908690602401611287565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b9392505050565b6000808060606104ca858363ffffffff61087b16565b93506001600160e01b0319841663dc1600f360e01b146104fc5760405162461bcd60e51b81526004016102ad90611486565b845161051290869060049063ffffffff61090016565b8060200190516105259190810190610d05565b9597919650949350915050565b600080610545838263ffffffff61087b16565b91506001600160e01b03198216630f47261b60e41b146105775760405162461bcd60e51b81526004016102ad90611486565b61058883601063ffffffff6108b416565b9050915091565b600080606080806105a6868563ffffffff61087b16565b94506001600160e01b0319851663a7cb5fb760e01b146105d85760405162461bcd60e51b81526004016102ad90611486565b505050506024828101516044840151606485015160848601519496929591820184019490820184019391010190565b60405160609063012b8bc960e11b9061062690859085906024016112b6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b92915050565b60405160609063a7cb5fb760e01b90610684908790879087908790602401611235565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290505b949350505050565b60006060806106d6848463ffffffff61087b16565b92506001600160e01b031983166394cfcdd760e01b146107085760405162461bcd60e51b81526004016102ad90611486565b835161071e90859060049063ffffffff61090016565b8060200190516107319190810190610f62565b9395909450915050565b600080606081610751858263ffffffff61087b16565b93506001600160e01b0319841663619ce88560e11b146107835760405162461bcd60e51b81526004016102ad90611486565b845161079990869060049063ffffffff61090016565b8060200190516105259190810190610d6a565b6040516060906394cfcdd760e01b9061062690859085906024016112d1565b60006107dd828263ffffffff61087b16565b90506001600160e01b03198116630f47261b60e41b148061080e57506001600160e01b0319811663012b8bc960e11b145b8061082957506001600160e01b0319811663a7cb5fb760e01b145b8061084457506001600160e01b031981166394cfcdd760e01b145b8061085f57506001600160e01b0319811663619ce88560e11b145b6104525760405162461bcd60e51b81526004016102ad90611486565b600081600401835110156108a1576108a161089c6003855185600401610980565b61099f565b5001602001516001600160e01b03191690565b600081601401835110156108d5576108d561089c6004855185601401610980565b50016014015173ffffffffffffffffffffffffffffffffffffffff1690565b60006104ad83836109a7565b6060818311156109195761091961089c60008585610980565b83518211156109325761093261089c6001848751610980565b8282036040519080825280601f01601f19166020018201604052801561095f576020820181803883390190505b5090506104ad61096e826109d1565b84610978876109d1565b0183516109d7565b6060632800659560e01b8484846040516024016104789392919061146b565b805160208201fd5b600081602001835110156109c8576109c861089c6005855185602001610980565b50016020015190565b60200190565b6020811015610a01576001816020036101000a038019835116818551168082178652505050610a78565b82821415610a0e57610a78565b82821115610a485760208103905080820181840181515b82851015610a40578451865260209586019590940193610a25565b905250610a78565b60208103905080820181840183515b81861215610a735782518252601f199283019290910190610a57565b855250505b505050565b803561065b816115af565b805161065b816115af565b600082601f830112610aa457600080fd5b8151610ab7610ab2826114bd565b611496565b81815260209384019390925082018360005b83811015610af55781518601610adf8882610ca1565b8452506020928301929190910190600101610ac9565b5050505092915050565b600082601f830112610b1057600080fd5b8135610b1e610ab2826114bd565b81815260209384019390925082018360005b83811015610af55781358601610b468882610c52565b8452506020928301929190910190600101610b30565b600082601f830112610b6d57600080fd5b8151610b7b610ab2826114bd565b91508181835260208401935060208101905083856020840282011115610ba057600080fd5b60005b83811015610af55781610bb68882610c47565b8452506020928301929190910190600101610ba3565b600082601f830112610bdd57600080fd5b8135610beb610ab2826114bd565b91508181835260208401935060208101905083856020840282011115610c1057600080fd5b60005b83811015610af55781610c268882610c3c565b8452506020928301929190910190600101610c13565b803561065b816115c3565b805161065b816115c3565b600082601f830112610c6357600080fd5b8135610c71610ab2826114de565b91508082526020830160208301858383011115610c8d57600080fd5b610c9883828461155c565b50505092915050565b600082601f830112610cb257600080fd5b8151610cc0610ab2826114de565b91508082526020830160208301858383011115610cdc57600080fd5b610c98838284611568565b600060208284031215610cf957600080fd5b60006106b98484610a7d565b600080600060608486031215610d1a57600080fd5b6000610d268686610a88565b9350506020610d3786828701610a88565b925050604084015167ffffffffffffffff811115610d5457600080fd5b610d6086828701610ca1565b9150509250925092565b600080600060608486031215610d7f57600080fd5b6000610d8b8686610a88565b935050602084015167ffffffffffffffff811115610da857600080fd5b610db486828701610ca1565b9250506040610d6086828701610c47565b60008060008060808587031215610ddb57600080fd5b6000610de78787610a7d565b945050602085013567ffffffffffffffff811115610e0457600080fd5b610e1087828801610bcc565b935050604085013567ffffffffffffffff811115610e2d57600080fd5b610e3987828801610bcc565b925050606085013567ffffffffffffffff811115610e5657600080fd5b610e6287828801610c52565b91505092959194509250565b600080600060608486031215610e8357600080fd5b6000610e8f8686610a7d565b935050602084013567ffffffffffffffff811115610eac57600080fd5b610eb886828701610c52565b9250506040610d6086828701610c3c565b60008060408385031215610edc57600080fd5b6000610ee88585610a7d565b9250506020610ef985828601610c3c565b9150509250929050565b60008060408385031215610f1657600080fd5b823567ffffffffffffffff811115610f2d57600080fd5b610f3985828601610bcc565b925050602083013567ffffffffffffffff811115610f5657600080fd5b610ef985828601610aff565b60008060408385031215610f7557600080fd5b825167ffffffffffffffff811115610f8c57600080fd5b610f9885828601610b5c565b925050602083015167ffffffffffffffff811115610fb557600080fd5b610ef985828601610a93565b600060208284031215610fd357600080fd5b813567ffffffffffffffff811115610fea57600080fd5b6106b984828501610c52565b60006104ad83836111ad565b600061100e838361119b565b505060200190565b61101f81611513565b82525050565b600061103082611506565b61103a818561150a565b93508360208202850161104c856109d1565b8060005b8581101561108657848403895281516110698582610ff6565b9450611074836109d1565b60209a909a0199925050600101611050565b5091979650505050505050565b600061109e82611506565b6110a8818561150a565b9350836020820285016110ba856109d1565b8060005b8581101561108657848403895281516110d78582610ff6565b94506110e2836109d1565b60209a909a01999250506001016110be565b60006110ff82611506565b611109818561150a565b9350611114836109d1565b8060005b8381101561114257815161112c8882611002565b9750611137836109d1565b925050600101611118565b509495945050505050565b600061115882611506565b611162818561150a565b935061116d836109d1565b8060005b838110156111425781516111858882611002565b9750611190836109d1565b925050600101611171565b61101f8161151e565b61101f81611521565b60006111b882611506565b6111c2818561150a565b93506111d2818560208601611568565b6111db81611598565b9093019392505050565b61101f81611551565b60006111fb600e8361150a565b7f57524f4e475f50524f58595f4944000000000000000000000000000000000000815260200192915050565b6020810161065b8284611016565b608081016112438287611016565b818103602083015261125581866110f4565b9050818103604083015261126981856110f4565b9050818103606083015261127d81846111ad565b9695505050505050565b606081016112958286611016565b81810360208301526112a781856111ad565b90506106b9604083018461119b565b604081016112c48285611016565b6104ad602083018461119b565b604080825281016112e281856110f4565b905081810360208301526106b98184611025565b6020810161065b82846111a4565b6040810161131282856111a4565b6104ad6020830184611016565b6080810161132d82876111a4565b61133a6020830186611016565b6113476040830185611016565b818103606083015261127d81846111ad565b60a0810161136782886111a4565b6113746020830187611016565b8181036040830152611386818661114d565b9050818103606083015261139a818561114d565b905081810360808301526113ae81846111ad565b979650505050505050565b608081016113c782876111a4565b6113d46020830186611016565b81810360408301526113e681856111ad565b90506113f5606083018461119b565b95945050505050565b6060810161140c82866111a4565b6114196020830185611016565b6106b9604083018461119b565b6060810161143482866111a4565b8181036020830152611446818561114d565b905081810360408301526113f58184611093565b602080825281016104ad81846111ad565b6060810161147982866111e5565b611419602083018561119b565b6020808252810161065b816111ee565b60405181810167ffffffffffffffff811182821017156114b557600080fd5b604052919050565b600067ffffffffffffffff8211156114d457600080fd5b5060209081020190565b600067ffffffffffffffff8211156114f557600080fd5b506020601f91909101601f19160190565b5190565b90815260200190565b600061065b82611538565b90565b6001600160e01b03191690565b80610452816115a2565b73ffffffffffffffffffffffffffffffffffffffff1690565b600061065b8261152e565b82818337506000910152565b60005b8381101561158357818101518382015260200161156b565b83811115611592576000848401525b50505050565b601f01601f191690565b600881106115ac57fe5b50565b6115b881611513565b81146115ac57600080fd5b6115b88161151e56fea365627a7a723158209efda36f3cb5141790ccdf07cc22c7a21973d0397ccfcc547e275ba75cfe9d3f6c6578706572696d656e74616cf564736f6c63430005110040",
  "devdoc": {
    "methods": {
      "decodeAssetProxyId(bytes)": {
        "details": "Decode AssetProxy identifier",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing an ERC-20, ERC-721, ERC1155, or MultiAsset asset."
        },
        "return": "The AssetProxy identifier"
      },
      "decodeERC1155AssetData(bytes)": {
        "details": "Decode ERC-1155 asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing an ERC-1155 set of assets."
        },
        "return": "The ERC-1155 AssetProxy identifier, the address of the ERC-1155 contract hosting the assets, an array of the identifiers of the assets to be traded, an array of asset amounts to be traded, and callback data.  Each element of the arrays corresponds to the same-indexed element of the other array.  Return values specified as `memory` are returned as pointers to locations within the memory of the input parameter `assetData`."
      },
      "decodeERC20AssetData(bytes)": {
        "details": "Decode ERC-20 asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing an ERC-20 asset."
        },
        "return": "The AssetProxy identifier, and the address of the ERC-20 contract hosting this asset."
      },
      "decodeERC20BridgeAssetData(bytes)": {
        "details": "Decode ERC20Bridge asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing an ERC20Bridge asset"
        },
        "return": "The ERC20BridgeProxy identifier, the address of the ERC20 token to transfer, the address of the bridge contract, and extra data to be passed to the bridge contract."
      },
      "decodeERC721AssetData(bytes)": {
        "details": "Decode ERC-721 asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing an ERC-721 asset."
        },
        "return": "The ERC-721 AssetProxy identifier, the address of the ERC-721 contract hosting this asset, and the identifier of the specific asset to be traded."
      },
      "decodeMultiAssetData(bytes)": {
        "details": "Decode multi-asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant data describing a multi-asset basket."
        },
        "return": "The Multi-Asset AssetProxy identifier, an array of the amounts of the assets to be traded, and an array of the AssetProxy-compliant data describing each asset to be traded.  Each element of the arrays corresponds to the same-indexed element of the other array."
      },
      "decodeStaticCallAssetData(bytes)": {
        "details": "Decode StaticCall asset data from the format described in the AssetProxy contract specification.",
        "params": {
          "assetData": "AssetProxy-compliant asset data describing a StaticCall asset"
        },
        "return": "The StaticCall AssetProxy identifier, the target address of the StaticCAll, the data to be passed to the target address, and the expected Keccak-256 hash of the static call return data."
      },
      "encodeERC1155AssetData(address,uint256[],uint256[],bytes)": {
        "details": "Encode ERC-1155 asset data into the format described in the AssetProxy contract specification.",
        "params": {
          "callbackData": "Data to be passed to receiving contracts when a transfer is performed.",
          "tokenAddress": "The address of the ERC-1155 contract hosting the asset(s) to be traded.",
          "tokenIds": "The identifiers of the specific assets to be traded.",
          "tokenValues": "The amounts of each asset to be traded."
        },
        "return": "AssetProxy-compliant asset data describing the set of assets."
      },
      "encodeERC20AssetData(address)": {
        "details": "Encode ERC-20 asset data into the format described in the AssetProxy contract specification.",
        "params": {
          "tokenAddress": "The address of the ERC-20 contract hosting the asset to be traded."
        },
        "return": "AssetProxy-compliant data describing the asset."
      },
      "encodeERC721AssetData(address,uint256)": {
        "details": "Encode ERC-721 asset data into the format described in the AssetProxy specification.",
        "params": {
          "tokenAddress": "The address of the ERC-721 contract hosting the asset to be traded.",
          "tokenId": "The identifier of the specific asset to be traded."
        },
        "return": "AssetProxy-compliant asset data describing the asset."
      },
      "encodeMultiAssetData(uint256[],bytes[])": {
        "details": "Encode data for multiple assets, per the AssetProxy contract specification.",
        "params": {
          "amounts": "The amounts of each asset to be traded.",
          "nestedAssetData": "AssetProxy-compliant data describing each asset to be traded."
        },
        "return": "AssetProxy-compliant data describing the set of assets."
      },
      "encodeStaticCallAssetData(address,bytes,bytes32)": {
        "details": "Encode StaticCall asset data into the format described in the AssetProxy contract specification.",
        "params": {
          "expectedReturnDataHash": "Expected Keccak-256 hash of the StaticCall return data.",
          "staticCallData": "Data that will be passed to staticCallTargetAddress in the StaticCall.",
          "staticCallTargetAddress": "Target address of StaticCall."
        },
        "return": "AssetProxy-compliant asset data describing the set of assets."
      },
      "revertIfInvalidAssetData(bytes)": {
        "details": "Reverts if assetData is not of a valid format for its given proxy id.",
        "params": {
          "assetData": "AssetProxy compliant asset data."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}