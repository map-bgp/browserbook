{
  "address": "0x27398618B407e609A7366f236c9535d54B4D5E20",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TokensExchangedAt",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOneOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTwoOwner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenOneAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenTwoAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "executeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getPass",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "authorizationKey",
          "type": "string"
        }
      ],
      "name": "setPass",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0939f95416fb5ab20695f18896105a05fcc90c82ce74a96731820ef23de32cda",
  "receipt": {
    "to": null,
    "from": "0x5061D190265199186A5240B92E1337d357A15465",
    "contractAddress": "0x27398618B407e609A7366f236c9535d54B4D5E20",
    "transactionIndex": 1,
    "gasUsed": "423741",
    "logsBloom": "0x
    "blockHash": "0x7180dc4383a4d63c1ba8e53ad30bf84a9a26af25d53d4efda98cd53ef8727a2d",
    "transactionHash": "0x0939f95416fb5ab20695f18896105a05fcc90c82ce74a96731820ef23de32cda",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23911150,
        "transactionHash": "0x0939f95416fb5ab20695f18896105a05fcc90c82ce74a96731820ef23de32cda",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005061d190265199186a5240b92e1337d357a15465",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000f0de6e59d9a180000000000000000000000000000000000000000000000001684c0f7b12285ae00000000000000000000000000000000000000000000046798532b93173a65ef0000000000000000000000000000000000000000000000001675b310cb84eb9600000000000000000000000000000000000000000000046798623979fcd80007",
        "logIndex": 3,
        "blockHash": "0x7180dc4383a4d63c1ba8e53ad30bf84a9a26af25d53d4efda98cd53ef8727a2d"
      }
    ],
    "blockNumber": 23911150,
    "cumulativeGasUsed": "530590",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bb429b2969cd719dffde04cea65d2544",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TokensExchangedAt\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOneOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTwoOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenOneAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenTwoAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"executeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getPass\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"authorizationKey\",\"type\":\"string\"}],\"name\":\"setPass\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exchange.sol\":\"Exchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Exchange.sol\":{\"content\":\"pragma solidity 0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\ncontract Exchange {\\n    struct Order {\\n        string id;\\n        string tokenFrom;\\n        string tokenTo;\\n        string orderType;\\n        string price;\\n        string quantity;\\n        address from;\\n        string created;\\n    }\\n\\n    bytes32 DOMAIN_SEPARATOR;\\n\\n    mapping(address => string) private password;\\n\\n    event TokensExchangedAt(address indexed, address indexed, uint256, uint256);\\n\\n    bytes32 constant EIP712DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    bytes32 constant ORDERS_TYPEHASH =\\n        keccak256(\\n            \\\"Order(string id,string tokenFrom,string tokenTo,string orderType,string price,string quantity,address from,string created)\\\"\\n        );\\n\\n    constructor() {\\n        uint256 chainId = 1337;\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(\\\"BrowserBook\\\")),\\n                keccak256(bytes(\\\"1\\\")),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    function setPass(string memory authorizationKey) public returns (bool) {\\n        password[msg.sender] = authorizationKey;\\n        return true;\\n    }\\n\\n    function getPass(address addr) external view returns (string memory) {\\n        return password[addr];\\n    }\\n\\n    function verifySignature(\\n        Order memory order,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view returns (bool) {\\n        bytes32 OrderHash = keccak256(\\n            abi.encode(\\n                ORDERS_TYPEHASH,\\n                keccak256(bytes(order.id)),\\n                keccak256(bytes(order.tokenFrom)),\\n                keccak256(bytes(order.tokenTo)),\\n                keccak256(bytes(order.orderType)),\\n                keccak256(bytes(order.price)),\\n                keccak256(bytes(order.quantity)),\\n                order.from,\\n                keccak256(bytes(order.created))\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, OrderHash)\\n        );\\n\\n        return ecrecover(digest, v, r, s) == order.from;\\n    }\\n\\n    function executeOrder(\\n        address tokenOneAddress,\\n        address tokenTwoAddress,\\n        address tokenOneOwner,\\n        address tokenTwoOwner,\\n        uint256 tokenOneId,\\n        uint256 tokenTwoId,\\n        uint256 tokenOneAmount,\\n        uint256 tokenTwoAmount,\\n        bytes calldata data\\n    ) public {\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenOneAddress).safeTransferFrom(\\n            tokenOneOwner,\\n            tokenTwoOwner,\\n            tokenOneId,\\n            tokenOneAmount,\\n            data\\n        );\\n\\n        // Execute `safeBatchTransferFrom` call\\n        // Either succeeds or throws\\n        IERC1155(tokenTwoAddress).safeTransferFrom(\\n            tokenTwoOwner,\\n            tokenOneOwner,\\n            tokenTwoId,\\n            tokenTwoAmount,\\n            data\\n        );\\n\\n        emit TokensExchangedAt(\\n            tokenOneAddress,\\n            tokenTwoAddress,\\n            tokenOneAmount,\\n            tokenTwoAmount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7db96a26a64237b6892068580d806b34a6ac6523b795cdc01fad11b7a99fe640\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604080518082018252600b81526a42726f77736572426f6f6b60a81b6020918201528151808301835260018152603160f81b908201529051610539916100c1917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f917fe1087249b96a4db6e26768fcd2ff115b7c565029b03764f9b576a6ddb546c8ca917fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69186913091016100e2565b60408051601f1981840301815291905280516020909101206000555061010e565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b6106398061011d6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806344e9fd4b14610046578063dc3eb47e1461006f578063e3cd7c0314610084575b600080fd5b61005961005436600461044c565b6100a4565b6040516100669190610546565b60405180910390f35b61008261007d366004610374565b6100ce565b005b610097610092366004610353565b6101f7565b6040516100669190610551565b336000908152600160209081526040822083516100c3928501906102a3565b50600190505b919050565b604051637921219560e11b81526001600160a01b038b169063f242432a90610104908b908b908b908a90899089906004016104ed565b600060405180830381600087803b15801561011e57600080fd5b505af1158015610132573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a915061016c908a908c908a908990899089906004016104ed565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f2de04c1cab2f0d31ca65b7f984748626e85676cbc738af619d6b297408696eca86866040516101e39291906105a4565b60405180910390a350505050505050505050565b6001600160a01b038116600090815260016020526040902080546060919061021e906105b2565b80601f016020809104026020016040519081016040528092919081815260200182805461024a906105b2565b80156102975780601f1061026c57610100808354040283529160200191610297565b820191906000526020600020905b81548152906001019060200180831161027a57829003601f168201915b50505050509050919050565b8280546102af906105b2565b90600052602060002090601f0160209004810192826102d15760008555610317565b82601f106102ea57805160ff1916838001178555610317565b82800160010185558215610317579182015b828111156103175782518255916020019190600101906102fc565b50610323929150610327565b5090565b5b808211156103235760008155600101610328565b80356001600160a01b03811681146100c957600080fd5b600060208284031215610364578081fd5b61036d8261033c565b9392505050565b6000806000806000806000806000806101208b8d031215610393578586fd5b61039c8b61033c565b99506103aa60208c0161033c565b98506103b860408c0161033c565b97506103c660608c0161033c565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff808211156103ff578384fd5b818d0191508d601f830112610412578384fd5b813581811115610420578485fd5b8e6020828501011115610431578485fd5b6020830194508093505050509295989b9194979a5092959850565b6000602080838503121561045e578182fd5b823567ffffffffffffffff80821115610475578384fd5b818501915085601f830112610488578384fd5b81358181111561049a5761049a6105ed565b604051601f8201601f19168101850183811182821017156104bd576104bd6105ed565b60405281815283820185018810156104d3578586fd5b818585018683013790810190930193909352509392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b901515815260200190565b6000602080835283518082850152825b8181101561057d57858101830151858201604001528201610561565b8181111561058e5783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b6002810460018216806105c657607f821691505b602082108114156105e757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212205c0e3b563cb6fb0f75eac7afb98a9feb471d8b1030289a8521df7f92b5030dad64736f6c63430008000033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806344e9fd4b14610046578063dc3eb47e1461006f578063e3cd7c0314610084575b600080fd5b61005961005436600461044c565b6100a4565b6040516100669190610546565b60405180910390f35b61008261007d366004610374565b6100ce565b005b610097610092366004610353565b6101f7565b6040516100669190610551565b336000908152600160209081526040822083516100c3928501906102a3565b50600190505b919050565b604051637921219560e11b81526001600160a01b038b169063f242432a90610104908b908b908b908a90899089906004016104ed565b600060405180830381600087803b15801561011e57600080fd5b505af1158015610132573d6000803e3d6000fd5b5050604051637921219560e11b81526001600160a01b038c16925063f242432a915061016c908a908c908a908990899089906004016104ed565b600060405180830381600087803b15801561018657600080fd5b505af115801561019a573d6000803e3d6000fd5b50505050886001600160a01b03168a6001600160a01b03167f2de04c1cab2f0d31ca65b7f984748626e85676cbc738af619d6b297408696eca86866040516101e39291906105a4565b60405180910390a350505050505050505050565b6001600160a01b038116600090815260016020526040902080546060919061021e906105b2565b80601f016020809104026020016040519081016040528092919081815260200182805461024a906105b2565b80156102975780601f1061026c57610100808354040283529160200191610297565b820191906000526020600020905b81548152906001019060200180831161027a57829003601f168201915b50505050509050919050565b8280546102af906105b2565b90600052602060002090601f0160209004810192826102d15760008555610317565b82601f106102ea57805160ff1916838001178555610317565b82800160010185558215610317579182015b828111156103175782518255916020019190600101906102fc565b50610323929150610327565b5090565b5b808211156103235760008155600101610328565b80356001600160a01b03811681146100c957600080fd5b600060208284031215610364578081fd5b61036d8261033c565b9392505050565b6000806000806000806000806000806101208b8d031215610393578586fd5b61039c8b61033c565b99506103aa60208c0161033c565b98506103b860408c0161033c565b97506103c660608c0161033c565b965060808b0135955060a08b0135945060c08b0135935060e08b013592506101008b013567ffffffffffffffff808211156103ff578384fd5b818d0191508d601f830112610412578384fd5b813581811115610420578485fd5b8e6020828501011115610431578485fd5b6020830194508093505050509295989b9194979a5092959850565b6000602080838503121561045e578182fd5b823567ffffffffffffffff80821115610475578384fd5b818501915085601f830112610488578384fd5b81358181111561049a5761049a6105ed565b604051601f8201601f19168101850183811182821017156104bd576104bd6105ed565b60405281815283820185018810156104d3578586fd5b818585018683013790810190930193909352509392505050565b6001600160a01b03878116825286166020820152604081018590526060810184905260a06080820181905281018290526000828460c084013781830160c090810191909152601f909201601f1916010195945050505050565b901515815260200190565b6000602080835283518082850152825b8181101561057d57858101830151858201604001528201610561565b8181111561058e5783604083870101525b50601f01601f1916929092016040019392505050565b918252602082015260400190565b6002810460018216806105c657607f821691505b602082108114156105e757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212205c0e3b563cb6fb0f75eac7afb98a9feb471d8b1030289a8521df7f92b5030dad64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2650,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_bytes32"
      },
      {
        "astId": 2654,
        "contract": "contracts/Exchange.sol:Exchange",
        "label": "password",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}